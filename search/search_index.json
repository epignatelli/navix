{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome","text":"<p>A fast, fully jittable, batched MiniGrid  reimplemented in JAX for HIGH THROUGHPUT</p> Welcome to NAVIX! <p>NAVIX is a reimplementation of the MiniGrid environment suite in JAX, and leverages JAX\u2019s intermediate language representation to migrate the computation to different accelerators, such as GPUs and TPUs.</p> <p>NAVIX is designed to be a drop-in replacement for the original MiniGrid environment, with the added benefit of being significantly faster. Experiments that took 1 week, now take 15 minutes.</p> <p>A <code>navix.Environment</code> is a <code>flax.struct.PyTreeNode</code> and supports <code>jax.vmap</code>, <code>jax.jit</code>, <code>jax.grad</code>, and all the other JAX's transformations. See some examples here.</p> <p> Most of the MiniGrid environments are supported, and the API is designed to be as close as possible to the original MiniGrid API. However, some features might be missing, or the API might be slightly different. If you find so, please open an issue or a pull request, contributions are welcome!</p> <p>Thanks to JAX's backend, NAVIX offers:</p> <ul> <li>Multiple accelerators: NAVIX can run on CPU, GPU, or TPU.</li> <li>Performance boost: 200 000x speed up in batch mode or 20x unbatched mode.</li> <li>Parallellisation: NAVIX can run up to 2048 PPO agents (32768 environments!) in parallel on a single Nvidia A100 80Gb.</li> <li>Full automatic differentiation: NAVIX can compute gradients of the environment with respect to the agent's actions.</li> </ul> <p>Get started with NAVIX</p>"},{"location":"api/index.html","title":"Index","text":"<ul> <li>navix<ul> <li>actions</li> <li>agents<ul> <li>agent</li> <li>models</li> <li>ppo</li> </ul> </li> <li>components</li> <li>entities</li> <li>environments<ul> <li>crossings</li> <li>dist_shift</li> <li>door_key</li> <li>dynamic_obstacles</li> <li>empty</li> <li>environment</li> <li>four_rooms</li> <li>go_to_door</li> <li>key_corridor</li> <li>lava_gap</li> <li>registry</li> <li>wrappers</li> </ul> </li> <li>events</li> <li>experiment</li> <li>grid</li> <li>observations</li> <li>rendering<ul> <li>cache</li> <li>registry</li> </ul> </li> <li>rewards</li> <li>spaces</li> <li>states</li> <li>tasks</li> <li>terminations</li> <li>transitions</li> </ul> </li> </ul>"},{"location":"api/actions.html","title":"Actions","text":"<p>The action system determines the next state of the environment given the current state and an action.</p>"},{"location":"api/actions.html#navix.actions.COMPLETE_ACTION_SET","title":"<code>COMPLETE_ACTION_SET = (noop, rotate_cw, rotate_ccw, forward, right, backward, left, pickup, open, done)</code>  <code>module-attribute</code>","text":"<p>Complete action set for the environment. This set includes all the actions that can be taken by the agent, and does not mirror the Minigrid action set.</p>"},{"location":"api/actions.html#navix.actions.MINIGRID_ACTION_SET","title":"<code>MINIGRID_ACTION_SET = (rotate_ccw, rotate_cw, forward, pickup, drop, toggle, done)</code>  <code>module-attribute</code>","text":"<p>Default action set from Minigrid. See https://github.com/Farama-Foundation/Minigrid/blob/master/minigrid/core/actions.py</p>"},{"location":"api/actions.html#navix.actions.backward","title":"<code>backward(state)</code>","text":"<p>Steps the player backward without changing the direction.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state.</p> required <p>Returns:</p> Name Type Description <code>State</code> <code>State</code> <p>The new state with the player moved backward.</p>"},{"location":"api/actions.html#navix.actions.done","title":"<code>done(state)</code>","text":"<p>A placeholder action that does nothing, but is a signal to the environment that the episode is over. This action does not terminate the episode, unless the termination function explicitly checks for it (not default).</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state.</p> required <p>Returns:</p> Name Type Description <code>State</code> <code>State</code> <p>The same state.</p>"},{"location":"api/actions.html#navix.actions.drop","title":"<code>drop(state)</code>","text":"<p>Replaces the position in front of the player with the item in the pocket.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state.</p> required <p>Returns:</p> Name Type Description <code>State</code> <code>State</code> <p>The new state with the item in the pocket dropped in front of the player.</p>"},{"location":"api/actions.html#navix.actions.forward","title":"<code>forward(state)</code>","text":"<p>Moves the player forward.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state.</p> required <p>Returns:</p> Name Type Description <code>State</code> <code>State</code> <p>The new state with the player moved forward.</p>"},{"location":"api/actions.html#navix.actions.left","title":"<code>left(state)</code>","text":"<p>Steps the player to the left without changing the direction.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state.</p> required <p>Returns:</p> Name Type Description <code>State</code> <code>State</code> <p>The new state with the player moved to the left.</p>"},{"location":"api/actions.html#navix.actions.noop","title":"<code>noop(state)</code>","text":"<p>No operation. Does nothing.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state.</p> required <p>Returns:</p> Name Type Description <code>State</code> <code>State</code> <p>The same state.</p>"},{"location":"api/actions.html#navix.actions.open","title":"<code>open(state)</code>","text":"<p>Unlocks and opens an openable object (like a door) if possible.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state.</p> required <p>Returns:</p> Name Type Description <code>State</code> <code>State</code> <p>The new state with the openable object opened.</p>"},{"location":"api/actions.html#navix.actions.pickup","title":"<code>pickup(state)</code>","text":"<p>Picks up an item in front of the player and puts it in the pocket. Args:     state (State): The current state. Returns:     State: The new state with the player entity having the item in the pocket.</p>"},{"location":"api/actions.html#navix.actions.right","title":"<code>right(state)</code>","text":"<p>Steps the player to the right without changing the direction.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state.</p> required <p>Returns:</p> Name Type Description <code>State</code> <code>State</code> <p>The new state with the player moved to the right.</p>"},{"location":"api/actions.html#navix.actions.rotate_ccw","title":"<code>rotate_ccw(state)</code>","text":"<p>Rotates the player counter-clockwise.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state.</p> required <p>Returns:</p> Name Type Description <code>State</code> <code>State</code> <p>The new state with the player rotated counter-clockwise.</p>"},{"location":"api/actions.html#navix.actions.rotate_cw","title":"<code>rotate_cw(state)</code>","text":"<p>Rotates the player clockwise.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state.</p> required <p>Returns:</p> Name Type Description <code>State</code> <code>State</code> <p>The new state with the player rotated clockwise.</p>"},{"location":"api/actions.html#navix.actions.toggle","title":"<code>toggle(state)</code>","text":"<p>Toggles an openable object (like a door) if possible.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state.</p> required <p>Returns:</p> Name Type Description <code>State</code> <code>State</code> <p>The new state with the openable object toggled.</p>"},{"location":"api/components.html","title":"Components","text":""},{"location":"api/components.html#navix.components.Component","title":"<code>Component</code>","text":"<p>               Bases: <code>PyTreeNode</code></p> <p>Base class for all components in the game. Components are used to store the data of the entities in the game.</p>"},{"location":"api/components.html#navix.components.Directional","title":"<code>Directional</code>","text":"<p>               Bases: <code>Component</code></p> <p>Flags an entity as directional, and provides the <code>direction</code> attribute</p>"},{"location":"api/components.html#navix.components.Directional.direction","title":"<code>direction = field(shape=())</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The direction the entity: 0 = east, 1 = south, 2 = west, 3 = north</p>"},{"location":"api/components.html#navix.components.HasColour","title":"<code>HasColour</code>","text":"<p>               Bases: <code>Component</code></p> <p>Flags an entity as having a colour, and provides the <code>colour</code> attribute</p>"},{"location":"api/components.html#navix.components.HasColour.colour","title":"<code>colour = field(shape=())</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The colour of the object for rendering.</p>"},{"location":"api/components.html#navix.components.HasSprite","title":"<code>HasSprite</code>","text":"<p>               Bases: <code>Component</code></p> <p>Flags an entity as having a sprite, and provides the <code>sprite</code> attribute. The sprite is used to render the entity in the game.</p>"},{"location":"api/components.html#navix.components.HasTag","title":"<code>HasTag</code>","text":"<p>               Bases: <code>Component</code></p> <p>Flags an entity as having a tag, and provides the <code>tag</code> attribute. The tag is used to identify the type of the entity in the observations.</p>"},{"location":"api/components.html#navix.components.HasTag.tag","title":"<code>tag</code>  <code>property</code>","text":"<p>The tag of the component, used to identify the type of the component in <code>observations.categorical</code></p>"},{"location":"api/components.html#navix.components.Holder","title":"<code>Holder</code>","text":"<p>               Bases: <code>Component</code></p> <p>Flags an entity as a holder, and provides the <code>pocket</code> attribute. The pocket is used to store the id of the item in the pocket.</p>"},{"location":"api/components.html#navix.components.Holder.pocket","title":"<code>pocket = field(shape=())</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The id of the item in the pocket (0 if empty)</p>"},{"location":"api/components.html#navix.components.Openable","title":"<code>Openable</code>","text":"<p>               Bases: <code>Component</code></p> <p>Flags an entity as openable, and provides the <code>requires</code> and <code>open</code> attributes</p>"},{"location":"api/components.html#navix.components.Openable.open","title":"<code>open = field(shape=())</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Open is jnp.asarray(0) if the entity is closed and 1 if open.</p>"},{"location":"api/components.html#navix.components.Openable.requires","title":"<code>requires = field(shape=())</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The id of the item required to consume this item. If set, it must be &gt; 0. If -1, the door is unlocked and does not require any key to open.</p>"},{"location":"api/components.html#navix.components.Pickable","title":"<code>Pickable</code>","text":"<p>               Bases: <code>Component</code></p> <p>Flags an entity as pickable, and provides the <code>id</code> attribute, which is used to identify the item in the inventory</p>"},{"location":"api/components.html#navix.components.Pickable.id","title":"<code>id = field(shape=())</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The id of the item. If set, it must be &gt;= 1.</p>"},{"location":"api/components.html#navix.components.Positionable","title":"<code>Positionable</code>","text":"<p>               Bases: <code>Component</code></p> <p>Flags an entity as positionable in the grid, and provides the <code>position</code> attribute</p>"},{"location":"api/components.html#navix.components.Positionable.position","title":"<code>position = field(shape=(2,))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The (row, column) position of the entity in the grid as a JAX array, defaults to the discard pile (-1, -1)</p>"},{"location":"api/components.html#navix.components.Stochastic","title":"<code>Stochastic</code>","text":"<p>               Bases: <code>Component</code></p> <p>Flags an entity as stochastic, and provides the <code>probability</code> attribute</p> TODO <ul> <li>consider replace probability (Array) with a distrax.Distribution</li> </ul>"},{"location":"api/components.html#navix.components.Stochastic.probability","title":"<code>probability = field(shape=())</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The probability of receiving the reward, if reached.</p>"},{"location":"api/entities.html","title":"Entities","text":""},{"location":"api/entities.html#navix.entities.Ball","title":"<code>Ball</code>","text":"<p>               Bases: <code>Entity</code>, <code>HasColour</code>, <code>Stochastic</code></p> <p>Goals are entities that can be reached by the player</p>"},{"location":"api/entities.html#navix.entities.Box","title":"<code>Box</code>","text":"<p>               Bases: <code>Entity</code>, <code>HasColour</code>, <code>Holder</code></p> <p>Goals are entities that can be reached by the player</p>"},{"location":"api/entities.html#navix.entities.Directions","title":"<code>Directions</code>","text":"<p>Directions enum class to store the directions in the game.</p>"},{"location":"api/entities.html#navix.entities.Door","title":"<code>Door</code>","text":"<p>               Bases: <code>Entity</code>, <code>Openable</code>, <code>HasColour</code></p> <p>Consumable items are world objects that can be consumed by the player. Consuming an item requires a tool (e.g. a key to open a door). A tool is an id (int) of another item, specified in the <code>requires</code> field (-1 if no tool is required). After an item is consumed, it is both removed from the <code>state.entities</code> collection, and replaced in the grid by the item specified in the <code>replacement</code> field (0 = floor by default). Examples of consumables are doors (to open) food (to eat) and water (to drink), etc.</p>"},{"location":"api/entities.html#navix.entities.Entities","title":"<code>Entities</code>","text":"<p>               Bases: <code>PyTreeNode</code></p> <p>Entities enum class to store the names of the entities in the game.</p>"},{"location":"api/entities.html#navix.entities.Entity","title":"<code>Entity</code>","text":"<p>               Bases: <code>Positionable</code>, <code>HasTag</code>, <code>HasSprite</code></p> <p>Entities are components that can be placed in the environment, and have a position and a tag. To create an entity, use the <code>create</code> method.</p>"},{"location":"api/entities.html#navix.entities.Entity.name","title":"<code>name</code>  <code>property</code>","text":"<p>The name of the entity</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the name of the entity</p>"},{"location":"api/entities.html#navix.entities.Entity.ndim","title":"<code>ndim</code>  <code>property</code>","text":"<p>The number of dimensions of the entity. The number of dimensions is the number of dimensions of the position minus 1.</p>"},{"location":"api/entities.html#navix.entities.Entity.shape","title":"<code>shape</code>  <code>property</code>","text":"<p>The batch shape of the entity. The batch shape is the shape of the entity excluding the dimensions of the component. For example, if the entity has a position of shape (batch_size, 2), the shape of the entity is (batch_size,).</p>"},{"location":"api/entities.html#navix.entities.Entity.transparent","title":"<code>transparent</code>  <code>property</code>","text":"<p>The transparent attribute of the entity. The transparent attribute is a boolean array that indicates if the entity is transparent to rendering.</p>"},{"location":"api/entities.html#navix.entities.Entity.walkable","title":"<code>walkable</code>  <code>property</code>","text":"<p>The walkable attribute of the entity. The walkable attribute is a boolean array that indicates if the entity can be walked on.</p>"},{"location":"api/entities.html#navix.entities.EntityIds","title":"<code>EntityIds</code>","text":"<p>EntityIds enum class to store the ids of the entities in the game.</p>"},{"location":"api/entities.html#navix.entities.Goal","title":"<code>Goal</code>","text":"<p>               Bases: <code>Entity</code>, <code>HasColour</code>, <code>Stochastic</code></p> <p>Goals are entities that can be reached by the player</p>"},{"location":"api/entities.html#navix.entities.Key","title":"<code>Key</code>","text":"<p>               Bases: <code>Entity</code>, <code>Pickable</code>, <code>HasColour</code></p> <p>Pickable items are world objects that can be picked up by the player. Examples of pickable items are keys, coins, etc.</p>"},{"location":"api/entities.html#navix.entities.Lava","title":"<code>Lava</code>","text":"<p>               Bases: <code>Entity</code></p> <p>Goals are entities that can be reached by the player</p>"},{"location":"api/entities.html#navix.entities.Player","title":"<code>Player</code>","text":"<p>               Bases: <code>Entity</code>, <code>Directional</code>, <code>Holder</code></p> <p>Players are entities that can act around the environment</p>"},{"location":"api/entities.html#navix.entities.Wall","title":"<code>Wall</code>","text":"<p>               Bases: <code>Entity</code>, <code>HasColour</code></p> <p>Walls are entities that cannot be walked through</p>"},{"location":"api/events.html","title":"Events","text":""},{"location":"api/events.html#navix.events.on_ball_hit","title":"<code>on_ball_hit(state)</code>","text":"<p>Checks whether the ball has hit something using the <code>ball_hit</code> event.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A boolean array indicating whether the ball has hit something.</p>"},{"location":"api/events.html#navix.events.on_door_done","title":"<code>on_door_done(state)</code>","text":"<p>Checks whether the action <code>done</code> has been called in front of a <code>Door</code> object with the correct colour.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A boolean array indicating whether the action <code>done</code> has been called in front of a <code>Door</code> object with the correct colour.</p>"},{"location":"api/events.html#navix.events.on_goal_reached","title":"<code>on_goal_reached(state)</code>","text":"<p>Checks whether the goal has been reached using the <code>goal_reached</code> event.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A boolean array indicating whether the goal has been reached.</p>"},{"location":"api/events.html#navix.events.on_lava_fall","title":"<code>on_lava_fall(state)</code>","text":"<p>Checks whether the lava has fallen using the <code>lava_fall</code> event.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A boolean array indicating whether the lava has fallen.</p>"},{"location":"api/events.html#navix.events.on_wall_hit","title":"<code>on_wall_hit(state)</code>","text":"<p>Checks whether the wall has been hit using the <code>wall_hit</code> event.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A boolean array indicating whether the wall has been hit.</p>"},{"location":"api/experiment.html","title":"Experiment","text":""},{"location":"api/experiment.html#navix.experiment.Experiment","title":"<code>Experiment</code>","text":"<p>A class to run an experiment with a given agent and environment.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the experiment.</p> required <code>agent</code> <code>Agent</code> <p>The agent to use in the experiment.</p> required <code>env</code> <code>Environment</code> <p>The environment to use in the experiment.</p> required <code>env_id</code> <code>str</code> <p>The ID of the environment.</p> <code>''</code> <code>seeds</code> <code>Tuple[int, ...]</code> <p>The seeds to use in the experiment.</p> <code>(0,)</code> <code>group</code> <code>str</code> <p>The group to use in the experiment.</p> <code>''</code> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the experiment.</p> <code>agent</code> <code>Agent</code> <p>The agent to use in the experiment.</p> <code>env</code> <code>Environment</code> <p>The environment to use in the experiment.</p> <code>env_id</code> <code>str</code> <p>The ID of the environment.</p> <code>seeds</code> <code>Tuple[int, ...]</code> <p>The seeds to use in the experiment.</p> <code>group</code> <code>str</code> <p>The group to use in the experiment.</p>"},{"location":"api/experiment.html#navix.experiment.Experiment.run","title":"<code>run(do_log=True)</code>","text":"<p>Default function to run the experiment. This function compiles the training function, trains the agent, and logs the results.</p> <p>Parameters:</p> Name Type Description Default <code>do_log</code> <code>bool</code> <p>Whether to log the results to wandb.</p> <code>True</code> <p>Warning</p> <p>Logging to <code>wandb</code> is usually much slower than training the agent itself. The time is linear in the number of seeds.</p> <p>Returns:</p> Name Type Description <code>Tuple</code> <p>A tuple containing the final training state and the logs.</p>"},{"location":"api/experiment.html#navix.experiment.Experiment.run_hparam_search","title":"<code>run_hparam_search(hparams_distr, pop_size)</code>","text":"<p>Function to run a hyperparameter search for the experiment. This function         samples hyperparameters from the given distributions, trains the agent, and         logs the results.</p> <p>Parameters:</p> Name Type Description Default <code>hparams_distr</code> <code>Dict[str, Distribution]</code> <p>A dictionary of             hyperparameter distributions. The keys are the hyperparameter names, which             must exist in <code>self.agent.hparams</code>, and the values are the corresponding             distributions.</p> required <code>pop_size</code> <code>int</code> <p>The number of hyperparameter sets to sample.</p> required <p>Returns:</p> Name Type Description <code>Tuple</code> <p>A tuple containing the final training states and the logs, batched             over the hyperparameter sets.</p>"},{"location":"api/grid.html","title":"Grid","text":""},{"location":"api/grid.html#navix.grid.RoomsGrid","title":"<code>RoomsGrid</code>","text":"<p>               Bases: <code>PyTreeNode</code></p> <p>A grid of rooms. Each room is represented as a 2D grid of shape <code>(room_height, room_width)</code>, with walls set to -1 and empty tiles set to 0. The grid of rooms is represented as a 2D grid of shape <code>(rows * (room_height + 1), cols * (room_width + 1))</code>, with walls set to -1 and empty tiles set to 0. The grid of rooms is represented as a 2D grid of shape <code>(rows * (room_height + 1), cols * (room_width + 1))</code>, with walls set to -1 and empty tiles set to 0.</p>"},{"location":"api/grid.html#navix.grid.RoomsGrid.create","title":"<code>create(num_rows, num_cols, room_size)</code>  <code>classmethod</code>","text":"<p>Creates a grid of rooms with the given number of rows and columns, and the given room size.</p> <p>Parameters:</p> Name Type Description Default <code>num_rows</code> <code>int</code> <p>The number of rows.</p> required <code>num_cols</code> <code>int</code> <p>The number of columns.</p> required <code>room_size</code> <code>Tuple[int, int]</code> <p>The size of each room <code>(height, width)</code>.</p> required <p>Returns:</p> Name Type Description <code>RoomsGrid</code> <code>RoomsGrid</code> <p>A grid of rooms.</p>"},{"location":"api/grid.html#navix.grid.RoomsGrid.get_grid","title":"<code>get_grid(occupied_positions=None)</code>","text":"<p>Computes the array representation of the grid of rooms, with walls set to         -1 and empty tiles set to 0.</p> <p>Parameters:</p> Name Type Description Default <code>occupied_positions</code> <code>Array</code> <p>A batch of extra occupied positions             of shape <code>(n, 2)</code>. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A 2D grid of shape <code>(rows * (room_height + 1), cols * (room_width + 1))</code>.</p>"},{"location":"api/grid.html#navix.grid.RoomsGrid.position_in_room","title":"<code>position_in_room(row, col, *, key)</code>","text":"<p>Generates a random position in a given room.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>Array</code> <p>The row index of the room.</p> required <code>col</code> <code>Array</code> <p>The column index of the room.</p> required <code>key</code> <code>Array</code> <p>A random key.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A random position in the given room.</p>"},{"location":"api/grid.html#navix.grid.RoomsGrid.position_on_border","title":"<code>position_on_border(row, col, side, *, key)</code>","text":"<p>Generates a random position on the border of a given room. Side is 0: west, 1: east, 2: north, 3: south (like padding)</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>Array</code> <p>The row index of the room.</p> required <code>col</code> <code>Array</code> <p>The column index of the room.</p> required <code>side</code> <code>int</code> <p>The side of the room.</p> required <code>key</code> <code>Array</code> <p>A random key.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A random position on the border of the given room.</p>"},{"location":"api/grid.html#navix.grid.align","title":"<code>align(patch, current_direction, desired_direction)</code>","text":"<p>Aligns a patch of the grid from the current direction to the desired direction.</p> <p>Parameters:</p> Name Type Description Default <code>patch</code> <code>Array</code> <p>A patch of the grid.</p> required <code>current_direction</code> <code>Array</code> <p>The current direction in the range [0, 1, 2, 3]         representing the cardinal directions [east, south, west, north].</p> required <code>desired_direction</code> <code>Array</code> <p>The desired direction in the range [0, 1, 2, 3]         representing the cardinal directions [east, south, west, north].</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A patch of the grid aligned to the desired direction.</p>"},{"location":"api/grid.html#navix.grid.coordinates","title":"<code>coordinates(grid)</code>","text":"<p>Returns a tuple of 2D coordinates [(col, row), ...] for each cell in the grid. A grid array of shape <code>i32[height, width]</code> will return a tuple of length (height * width), containing two arrays, each of shape <code>i32[2]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>grid</code> <code>Array</code> <p>A 2D grid of shape (height, width).</p> required <p>Returns:</p> Type Description <code>Coordinates</code> <p>Tuple[Array, Array]: A tuple of two arrays containing the 2D coordinates of         each cell in the grid.</p>"},{"location":"api/grid.html#navix.grid.coordinates_from_idx","title":"<code>coordinates_from_idx(grid, idx)</code>","text":"<p>Converts a flat index of shape <code>i32[]</code> into a 2D coordinate <code>i32[2]</code> containing     (col, row) data. The index is calculated as <code>idx = row * width + col</code>.</p> <p>Parameters:</p> Name Type Description Default <code>grid</code> <code>Array</code> <p>A 2D grid of shape (height, width).</p> required <code>idx</code> <code>Array</code> <p>A flat index of shape <code>i32[]</code>.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A 2D coordinate of shape <code>i32[2]</code> containing the (col, row) data.</p>"},{"location":"api/grid.html#navix.grid.crop","title":"<code>crop(grid, origin, direction, radius, padding_value=0)</code>","text":"<p>Crops a grid around a given origin, facing a given direction, with a given radius.</p> <p>Parameters:</p> Name Type Description Default <code>grid</code> <code>Array</code> <p>A 2D grid of shape <code>(height, width)</code>.</p> required <code>origin</code> <code>Array</code> <p>The origin of the crop.</p> required <code>direction</code> <code>Array</code> <p>The direction the crop is facing.</p> required <code>radius</code> <code>int</code> <p>The radius of the crop.</p> required <code>padding_value</code> <code>int</code> <p>The padding value. Defaults to 0.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A cropped grid.</p>"},{"location":"api/grid.html#navix.grid.from_ascii_map","title":"<code>from_ascii_map(ascii_map, mapping={})</code>","text":"<p>Converts an ASCII map into a 2D grid. The ASCII map is a string where each character represents a tile in the grid. The mapping dictionary can be used to map ASCII characters to integer values. By default, the mapping is as follows: - <code>#</code> is mapped to -1 - <code>.</code> is mapped to 0</p> <p>Parameters:</p> Name Type Description Default <code>ascii_map</code> <code>str</code> <p>The ASCII map.</p> required <code>mapping</code> <code>Dict[str, int]</code> <p>A dictionary mapping ASCII characters to integer         values. Defaults to {}.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A 2D grid representing the ASCII map.</p>"},{"location":"api/grid.html#navix.grid.horizontal_wall","title":"<code>horizontal_wall(grid, col_idx, opening_row_idx=None)</code>","text":"<p>Creates a horizontal wall in the grid at the given column index, with an opening at the         given row index.</p> <p>Parameters:</p> Name Type Description Default <code>grid</code> <code>Array</code> <p>A 2D grid of shape <code>(height, width)</code>.</p> required <code>col_idx</code> <code>int</code> <p>The column index where the wall is placed.</p> required <code>opening_row_idx</code> <code>Array</code> <p>The row index where the opening is placed.         Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A 2D grid of shape <code>(height, width)</code> with a horizontal wall.</p>"},{"location":"api/grid.html#navix.grid.idx_from_coordinates","title":"<code>idx_from_coordinates(grid, coordinates)</code>","text":"<p>Converts a batch of 2D coordinates [(col, row), ...] into a flat index</p> <p>Parameters:</p> Name Type Description Default <code>grid</code> <code>Array</code> <p>A 2D grid of shape (height, width).</p> required <code>coordinates</code> <code>Array</code> <p>A batch of 2D coordinates of shape (batch_size, 2).</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A flat index of shape <code>i32[batch_size]</code> for each coordinate in the batch.</p>"},{"location":"api/grid.html#navix.grid.mask_by_coordinates","title":"<code>mask_by_coordinates(grid, address, comparison_fn=jnp.greater_equal)</code>","text":"<p>This is a workaround to compute dynamicly-sized masks in XLA, which would not be possible otherwise. Returns a mask of the same shape as <code>grid</code> where the value is 1 if the corresponding element in <code>grid</code> satisfies the <code>comparison_fn</code> with the corresponding element in <code>address</code> (col, row) and 0 otherwise.</p> <p>Parameters:</p> Name Type Description Default <code>grid</code> <code>Array</code> <p>A 2D grid of shape (height, width).</p> required <code>address</code> <code>Coordinates</code> <p>A tuple of 2D coordinates (col, row).</p> required <code>comparison_fn</code> <code>Callable[[Array, Array], Array]</code> <p>A comparison function.         Defaults to <code>jnp.greater_equal</code>.</p> <code>greater_equal</code> <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A boolean mask of the same shape as <code>grid</code>.</p>"},{"location":"api/grid.html#navix.grid.positions_equal","title":"<code>positions_equal(a, b)</code>","text":"<p>Checks if two points are equal.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Array</code> <p>A 2D coordinate of shape <code>i32[2]</code> containing the (col, row) data.</p> required <code>b</code> <code>Array</code> <p>A 2D coordinate of shape <code>i32[2]</code> containing the (col, row) data.</p> required <p>Returns:</p>"},{"location":"api/grid.html#navix.grid.random_colour","title":"<code>random_colour(key, n=1)</code>","text":"<p>Generates <code>n</code> random colours in the range [0, 1, 2, 3, 4, 5].</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Array</code> <p>A random key.</p> required <code>n</code> <code>int</code> <p>The number of random colours to generate. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A batch of random colours of shape <code>u8[n]</code>.</p>"},{"location":"api/grid.html#navix.grid.random_directions","title":"<code>random_directions(key, n=1)</code>","text":"<p>Generates <code>n</code> random directions in the range [0, 1, 2, 3] representing the         cardinal directions [east, south, west, north].</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Array</code> <p>A random key.</p> required <code>n</code> <code>int</code> <p>The number of random directions to generate. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A batch of random directions of shape <code>i32[n]</code>.</p>"},{"location":"api/grid.html#navix.grid.random_positions","title":"<code>random_positions(key, grid, n=1, exclude=jnp.asarray((-1, -1)))</code>","text":"<p>Generates <code>n</code> random positions in the grid, excluding the <code>exclude</code> position.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Array</code> <p>A random key.</p> required <code>grid</code> <code>Array</code> <p>A 2D grid of shape (height, width).</p> required <code>n</code> <code>int</code> <p>The number of random positions to generate. Defaults to 1.</p> <code>1</code> <code>exclude</code> <code>Array</code> <p>The position to exclude. Defaults to jnp.asarray((-1, -1)).</p> <code>asarray((-1, -1))</code> <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A batch of random positions of shape <code>i32[n, 2]</code>.</p>"},{"location":"api/grid.html#navix.grid.room","title":"<code>room(height, width)</code>","text":"<p>Creates an array representing a room of size <code>height</code> x <code>width</code>, including a set of walls around the room. The room is represented as a 2D grid of shape <code>(height, width)</code>, including walls, with walls set to -1 and empty tiles set to 0.</p> <p>Parameters:</p> Name Type Description Default <code>height</code> <code>int</code> <p>The height of the room.</p> required <code>width</code> <code>int</code> <p>The width of the room.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A 2D grid of shape <code>(height, width)</code> representing a room.</p>"},{"location":"api/grid.html#navix.grid.rotate","title":"<code>rotate(direction, spin)</code>","text":"<p>Changes a direction vectory by a given number of spins.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>Array</code> <p>A direction vector of shape <code>i32[]</code> in the range [0, 3]         representing the cardinal directions [east, south, west, north].</p> required <code>spin</code> <code>int</code> <p>The number of spins to apply.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A direction vector of shape <code>i32[]</code> in the range [0, 3] representing         the cardinal directions [east, south, west, north].</p>"},{"location":"api/grid.html#navix.grid.translate","title":"<code>translate(position, direction, modulus=jnp.asarray(1))</code>","text":"<p>Translates a point in a grid by a given direction and modulus.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>Array</code> <p>A 2D coordinate of shape <code>i32[2]</code> containing the (col, row) data.</p> required <code>direction</code> <code>Array</code> <p>A direction in the range [0, 1, 2, 3] representing the         cardinal directions [east, south, west, north].</p> required <code>modulus</code> <code>Array</code> <p>The modulus of the translation. Defaults to jnp.asarray(1).</p> <code>asarray(1)</code> <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A 2D coordinate of shape <code>i32[2]</code> containing the (col, row) data.</p>"},{"location":"api/grid.html#navix.grid.translate_forward","title":"<code>translate_forward(position, forward_direction, modulus)</code>","text":"<p>Translates a point in a grid by a given forward direction and modulus.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>Array</code> <p>A 2D coordinate of shape <code>i32[2]</code> containing the (col, row) data.</p> required <code>forward_direction</code> <code>Array</code> <p>A direction in the range [0, 1, 2, 3] representing the         cardinal directions [east, south, west, north].</p> required <code>modulus</code> <code>Array</code> <p>The modulus of the translation.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <p>A 2D coordinate of shape <code>i32[2]</code> containing the (col, row) data.</p>"},{"location":"api/grid.html#navix.grid.translate_left","title":"<code>translate_left(position, forward_direction, modulus)</code>","text":"<p>Translates a point in a grid by a given left direction and modulus.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>Array</code> <p>A 2D coordinate of shape <code>i32[2]</code> containing the (col, row) data.</p> required <code>forward_direction</code> <code>Array</code> <p>A direction in the range [0, 1, 2, 3] representing the         cardinal directions [east, south, west, north].</p> required <code>modulus</code> <code>Array</code> <p>The modulus of the translation.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <p>A 2D coordinate of shape <code>i32[2]</code> containing the (col, row) data.</p>"},{"location":"api/grid.html#navix.grid.translate_right","title":"<code>translate_right(position, forward_direction, modulus)</code>","text":"<p>Translates a point in a grid by a given right direction and modulus.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>Array</code> <p>A 2D coordinate of shape <code>i32[2]</code> containing the (col, row) data.</p> required <code>forward_direction</code> <code>Array</code> <p>A direction in the range [0, 1, 2, 3] representing the         cardinal directions [east, south, west, north].</p> required <code>modulus</code> <code>Array</code> <p>The modulus of the translation.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <p>A 2D coordinate of shape <code>i32[2]</code> containing the (col, row) data.</p>"},{"location":"api/grid.html#navix.grid.two_rooms","title":"<code>two_rooms(height, width, key)</code>","text":"<p>Creates a 2D grid representing two rooms of size <code>height</code> x <code>width</code>, separated by a wall. The rooms are represented as a 2D grid of shape <code>(height, width)</code>,     including walls, with walls set to -1 and empty tiles set to 0.</p> <p>Parameters:</p> Name Type Description Default <code>height</code> <code>int</code> <p>The height of the rooms.</p> required <code>width</code> <code>int</code> <p>The width of the rooms.</p> required <code>key</code> <code>Array</code> <p>A random key, determining the position of the wall separating the rooms.</p> required <p>Returns:</p> Type Description <code>Tuple[Array, Array]</code> <p>Tuple[Array, Array]: A tuple containing the 2D grid representing the rooms         and the column index of the wall separating the rooms.</p>"},{"location":"api/grid.html#navix.grid.vertical_wall","title":"<code>vertical_wall(grid, row_idx, opening_col_idx=None)</code>","text":"<p>Creates a vertical wall in the grid at the given row index, with an opening at the         given column index.</p> <p>Parameters:</p> Name Type Description Default <code>grid</code> <code>Array</code> <p>A 2D grid of shape <code>(height, width)</code>.</p> required <code>row_idx</code> <code>int</code> <p>The row index where the wall is placed.</p> required <code>opening_col_idx</code> <code>Array</code> <p>The column index where the opening is placed.         Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A 2D grid of shape <code>(height, width)</code> with a vertical wall.</p>"},{"location":"api/grid.html#navix.grid.view_cone","title":"<code>view_cone(transparency_map, origin, radius)</code>","text":"<p>Computes the view cone of a given origin in a grid with a given radius. The view cone is a boolean map of transparent (1) and opaque (0) tiles, indicating whether a tile is visible from the origin or not.</p> <p>Parameters:</p> Name Type Description Default <code>transparency_map</code> <code>Array</code> <p>A boolean map of transparent (1) and opaque (0) tiles.</p> required <code>origin</code> <code>Array</code> <p>The origin of the view cone.</p> required <code>radius</code> <code>int</code> <p>The radius of the view cone.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>The view cone of the given origin in the grid with the given radius.</p>"},{"location":"api/observations.html","title":"Observations","text":""},{"location":"api/observations.html#navix.observations.categorical","title":"<code>categorical(state)</code>","text":"<p>Fully observable grid with a categorical state representation. Each entity is represented by its unique integer tag.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A grid of integers, where each integer represents an entity,         represented as an array of shape <code>i32[H, W]</code>, where <code>H</code> and <code>W</code> are the height         and width of the grid.</p>"},{"location":"api/observations.html#navix.observations.categorical_first_person","title":"<code>categorical_first_person(state)</code>","text":"<p>Categorical state representation, but cropped to the agent's view, and aligned     with the agent's direction, such that the agent always points upwards.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A grid of integers, where each integer represents an entity,         represented as an array of shape <code>i32[2 * RADIUS + 1, 2 * RADIUS + 1]</code>.</p>"},{"location":"api/observations.html#navix.observations.none","title":"<code>none(state)</code>","text":"<p>An empty observation represented as an array of shape f32[0]. Useful for testing purposes.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A 0-shaped array <code>f32[0]</code>.</p>"},{"location":"api/observations.html#navix.observations.rgb","title":"<code>rgb(state)</code>","text":"<p>Fully observable grid with an RGB state representation. Each entity is represented by its unique RGB sprite. The RGB sprites are     stored in a cache, and the entities are placed on the grid according to their     positions.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>An RGB image of the grid, represented as an array of shape         <code>u8[H * S, W * S, 3]</code>, where <code>H</code> and <code>W</code> are the height and width of the grid,</p> <code>Array</code> <p>and <code>S</code> is the size of the tile.</p>"},{"location":"api/observations.html#navix.observations.rgb_first_person","title":"<code>rgb_first_person(state)</code>","text":"<p>First person view with an RGB state representation. The image is cropped to the agent's view, and aligned with the agent's direction,     such that the agent always points upwards. See <code>rgb</code> for more details. See <code>rgb</code> for more details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>An RGB image of the agent's view, represented as an array of shape         <code>u8[(2 * RADIUS + 1) * S, (2 * RADIUS + 1) * S, 3]</code>, where </p> <code>Array</code> <p><code>S</code> is the size of the tile.</p>"},{"location":"api/observations.html#navix.observations.symbolic","title":"<code>symbolic(state)</code>","text":"<p>Fully observable grid with a symbolic state representation as originally     proposed in the MiniGrid environment. The symbol is a triple of (OBJECT_TAG, COLOUR_IDX, OPEN/CLOSED/LOCKED). The last layer might also contain the direction of the entity, for example, the direction of the agent.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A grid of integers, where each integer represents an entity,         represented as an array of shape <code>u8[H, W, 3]</code>, where <code>H</code> and <code>W</code> are the height         and width of the grid.</p>"},{"location":"api/observations.html#navix.observations.symbolic_first_person","title":"<code>symbolic_first_person(state)</code>","text":"<p>First person view with a symbolic state representation, but cropped to the     agent's view, and aligned with the agent's direction, such that the agent always     points upwards. See <code>symbolic</code> for more details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A grid of integers, where each integer represents an entity,         represented as an array of shape <code>u8[2 * RADIUS + 1, 2 * RADIUS + 1, 3]</code>.</p>"},{"location":"api/rewards.html","title":"Rewards","text":""},{"location":"api/rewards.html#navix.rewards.DEFAULT_TASK","title":"<code>DEFAULT_TASK = compose(on_goal_reached, action_cost)</code>  <code>module-attribute</code>","text":"<p>The default task for the game, composed of the <code>on_goal_reached</code> and <code>action_cost</code> reward functions.</p>"},{"location":"api/rewards.html#navix.rewards.action_cost","title":"<code>action_cost(prev_state, action, new_state, cost=0.01)</code>","text":"<p>A reward function that returns a negative value when an action is taken.  All actions have a cost of <code>cost</code>, except for noops.</p> <p>Parameters:</p> Name Type Description Default <code>prev_state</code> <code>State</code> <p>The previous state of the game.</p> required <code>action</code> <code>Array</code> <p>The action taken.</p> required <code>new_state</code> <code>State</code> <p>The new state of the game.</p> required <code>cost</code> <code>float</code> <p>The cost of taking an action.</p> <code>0.01</code> <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A scalar array <code>f32[]</code> with value -<code>cost</code> if the action is not a noop,         and 0 otherwise.</p>"},{"location":"api/rewards.html#navix.rewards.compose","title":"<code>compose(*reward_functions, operator=jnp.sum)</code>","text":"<p>Compose multiple reward functions into a single reward function. The functions are called in order and the results are reduced using the <code>operator</code>     function.</p> <p>Parameters:</p> Name Type Description Default <code>*reward_functions</code> <code>Callable[[State, Array, State], Array]</code> <p>A list of reward functions.</p> <code>()</code> <code>operator</code> <code>Callable</code> <p>The operator to reduce the results of the reward functions.</p> <code>sum</code> <p>Returns:</p> Name Type Description <code>Callable</code> <code>Callable</code> <p>A composed reward function that applies the <code>operator</code> to the results of the         reward functions.</p>"},{"location":"api/rewards.html#navix.rewards.free","title":"<code>free(state)</code>","text":"<p>A reward function that always returns 0, to simulate reward-free learning.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A scalar array <code>f32[]</code> with value 0.</p>"},{"location":"api/rewards.html#navix.rewards.on_door_done","title":"<code>on_door_done(prev_state, action, state)</code>","text":"<p>A reward function that returns a positive value when the agent uses the action     <code>done</code> in front of a door.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A scalar array <code>f32[]</code> with value 1 if the agent uses the action <code>done</code> in         front of a door, and 0 otherwise.</p>"},{"location":"api/rewards.html#navix.rewards.on_goal_reached","title":"<code>on_goal_reached(prev_state, action, state)</code>","text":"<p>A reward function that returns 1 when the goal is reached, and 0 otherwise.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A scalar array <code>f32[]</code> with value 1 if the goal is reached, and 0 otherwise.</p>"},{"location":"api/rewards.html#navix.rewards.time_cost","title":"<code>time_cost(prev_state, action, new_state, cost=0.01)</code>","text":"<p>A reward function that returns a negative value as time passes, paying a cost     of <code>cost</code> at each time step.</p> <p>Parameters:</p> Name Type Description Default <code>prev_state</code> <code>State</code> <p>The previous state of the game.</p> required <code>action</code> <code>Array</code> <p>The action taken.</p> required <code>new_state</code> <code>State</code> <p>The new state of the game.</p> required <code>cost</code> <code>float</code> <p>The cost of time passing.</p> <code>0.01</code> <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A scalar array <code>f32[]</code> with value -<code>cost</code>.</p>"},{"location":"api/rewards.html#navix.rewards.wall_hit_cost","title":"<code>wall_hit_cost(prev_state, action, state, cost=0.01)</code>","text":"<p>A reward function that returns a negative value when the agent hits a wall,     paying a cost of <code>cost</code> for each wall hit.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state of the game.</p> required <code>cost</code> <code>float</code> <p>The cost of hitting a wall.</p> <code>0.01</code> <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A scalar array <code>f32[]</code> with value -<code>cost</code> if the agent hits a wall,         and 0 otherwise.</p>"},{"location":"api/spaces.html","title":"Spaces","text":""},{"location":"api/spaces.html#navix.spaces.Continuous","title":"<code>Continuous</code>","text":"<p>               Bases: <code>Space</code></p>"},{"location":"api/spaces.html#navix.spaces.Continuous.create","title":"<code>create(shape, minimum, maximum, dtype=jnp.float32)</code>  <code>classmethod</code>","text":"<p>Create a continuous space with a given shape, minimum and maximum values.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>Shape</code> <p>The shape of the space.</p> required <code>minimum</code> <code>Array</code> <p>The minimum value of the space.</p> required <code>maximum</code> <code>Array</code> <p>The maximum value of the space.</p> required <code>dtype</code> <code>dtype</code> <p>The data type of the space.</p> <code>float32</code> <p>Returns:</p> Name Type Description <code>Continuous</code> <code>Continuous</code> <p>A continuous space with the given shape, minimum and maximum values.</p>"},{"location":"api/spaces.html#navix.spaces.Continuous.sample","title":"<code>sample(key)</code>","text":"<p>Generate a random sample from the space.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Array</code> <p>A random key to generate the sample.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A random sample from the space.</p>"},{"location":"api/spaces.html#navix.spaces.Discrete","title":"<code>Discrete</code>","text":"<p>               Bases: <code>Space</code></p>"},{"location":"api/spaces.html#navix.spaces.Discrete.n","title":"<code>n</code>  <code>property</code>","text":"<p>The number of elements in the space.</p> <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>The number of elements in the space.</p>"},{"location":"api/spaces.html#navix.spaces.Discrete.create","title":"<code>create(n_elements, shape=(), dtype=jnp.int32)</code>  <code>classmethod</code>","text":"<p>Create a discrete space with a given number of elements.</p> <p>Parameters:</p> Name Type Description Default <code>n_elements</code> <code>int | Array</code> <p>The number of elements in the space.</p> required <code>shape</code> <code>Shape</code> <p>The shape of the space.</p> <code>()</code> <code>dtype</code> <code>dtype</code> <p>The data type of the space.</p> <code>int32</code> <p>Returns:</p> Name Type Description <code>Discrete</code> <code>Discrete</code> <p>A discrete space with the given number of elements.</p>"},{"location":"api/spaces.html#navix.spaces.Discrete.sample","title":"<code>sample(key)</code>","text":"<p>Generate a random sample from the space.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Array</code> <p>A random key to generate the sample.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A random sample from the space.</p>"},{"location":"api/spaces.html#navix.spaces.Space","title":"<code>Space</code>","text":"<p>               Bases: <code>PyTreeNode</code></p> <p>Base class for all spaces in the game. Spaces define the shape and type of the         observations, actions and rewards in the game.     The <code>sample</code> method is used to generate random samples from the space.</p> <p>Note</p> <p>To initialize a space, use the <code>create</code> method of the specific space class.</p> TODO <ul> <li>maximum and minimum should be static objects, not arrays.</li> </ul> <p>But how do we handle the case when they are not scalars? Maybe numpy arrays?</p>"},{"location":"api/spaces.html#navix.spaces.Space.sample","title":"<code>sample(key)</code>","text":"<p>Generate a random sample from the space.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Array</code> <p>A random key to generate the sample.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A random sample from the space.</p>"},{"location":"api/states.html","title":"States","text":""},{"location":"api/states.html#navix.states.Event","title":"<code>Event</code>","text":"<p>               Bases: <code>Positionable</code>, <code>HasColour</code></p> <p>A struct representing an event that happened in the environment. It contains the position of the event, the colour of the entity involved in the event, whether the event happened, and the type of event that happened.</p> <p>Note</p> <p>Notice that we need the <code>happened</code> property, which flags if an event has happened or not, because JAX does not support variable size arrays. This means that we cannot add an event to the list in the middle of training. Instead, we initialise all events, and mask them out as not happened.</p> <p>Attributes:</p> Name Type Description <code>position</code> <code>Array</code> <p>The (row, column) position of the event in the grid.</p> <code>colour</code> <code>Array</code> <p>The colour of the entity involved in the event.</p> <code>happened</code> <code>Array</code> <p>A boolean flag indicating whether the event happened.</p> <code>event_type</code> <code>Array</code> <p>The type of event that happened.</p>"},{"location":"api/states.html#navix.states.EventType","title":"<code>EventType</code>","text":"<p>Enumeration of the different types of events that can happen in the environment.</p>"},{"location":"api/states.html#navix.states.EventsManager","title":"<code>EventsManager</code>","text":"<p>               Bases: <code>PyTreeNode</code></p> <p>A struct that manages the events. It contains the different events that can happen in the environment, such as the goal being reached, the player being hit by a ball, etc.</p> <p>Attributes:</p> Name Type Description <code>goal_reached</code> <code>Event</code> <p>An event indicating that the goal has been reached.</p> <code>ball_hit</code> <code>Event</code> <p>An event indicating that the player has been hit by a ball.</p> <code>wall_hit</code> <code>Event</code> <p>An event indicating that the player has hit a wall.</p> <code>lava_fall</code> <code>Event</code> <p>An event indicating that the lava has fallen.</p> <code>key_pickup</code> <code>Event</code> <p>An event indicating that the player has picked up a key.</p> <code>door_opening</code> <code>Event</code> <p>An event indicating that the player has opened a door.</p> <code>door_unlock</code> <code>Event</code> <p>An event indicating that the player has unlocked a door.</p> <code>ball_pickup</code> <code>Event</code> <p>An event indicating that the player has picked up a ball.</p>"},{"location":"api/states.html#navix.states.EventsManager.record_ball_hit","title":"<code>record_ball_hit(ball)</code>","text":"<p>Flags an event when the player is hit by a ball as happened and returns the updated events manager.</p> <p>Parameters:</p> Name Type Description Default <code>ball</code> <code>Ball</code> <p>The ball that hit the player.</p> required <p>Returns:</p> Name Type Description <code>EventsManager</code> <code>EventsManager</code> <p>The updated events manager.</p>"},{"location":"api/states.html#navix.states.EventsManager.record_ball_pickup","title":"<code>record_ball_pickup(ball, position)</code>","text":"<p>Flags an event when the player picks up a ball as happened and returns the updated events manager.</p> <p>Parameters:</p> Name Type Description Default <code>ball</code> <code>Ball</code> <p>The ball the player picked up.</p> required <code>position</code> <code>Array</code> <p>The position of the ball in the grid.</p> required <p>Returns:</p> Name Type Description <code>EventsManager</code> <code>EventsManager</code> <p>The updated events manager.</p>"},{"location":"api/states.html#navix.states.EventsManager.record_door_opening","title":"<code>record_door_opening(door, position)</code>","text":"<p>Flags an event when the player opens a door as happened and returns the updated events manager.</p> <p>Parameters:</p> Name Type Description Default <code>door</code> <code>Door</code> <p>The door the player opened.</p> required <code>position</code> <code>Array</code> <p>The position of the door in the grid.</p> required <p>Returns:</p> Name Type Description <code>EventsManager</code> <code>EventsManager</code> <p>The updated events manager.</p>"},{"location":"api/states.html#navix.states.EventsManager.record_door_unlock","title":"<code>record_door_unlock(door, position)</code>","text":"<p>Flags an event when the player unlocks a door as happened and returns the updated events manager.</p> <p>Parameters:</p> Name Type Description Default <code>door</code> <code>Door</code> <p>The door the player unlocked.</p> required <code>position</code> <code>Array</code> <p>The position of the door in the grid.</p> required <p>Returns:</p> Name Type Description <code>EventsManager</code> <code>EventsManager</code> <p>The updated events manager.</p>"},{"location":"api/states.html#navix.states.EventsManager.record_goal_reached","title":"<code>record_goal_reached(goal, position)</code>","text":"<p>Flags an event when the player reaches the goal as happened and returns the updated events manager.</p> <p>Parameters:</p> Name Type Description Default <code>goal</code> <code>Goal</code> <p>The goal the player reached.</p> required <code>position</code> <code>Array</code> <p>The position of the goal in the grid.</p> required <p>Returns:</p> Name Type Description <code>EventsManager</code> <code>EventsManager</code> <p>The updated events manager.</p>"},{"location":"api/states.html#navix.states.EventsManager.record_grid_hit","title":"<code>record_grid_hit(position)</code>","text":"<p>Flags an event when the player hits a wall as happened and returns the updated events manager.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>Array</code> <p>The position of the wall in the grid.</p> required <p>Returns:</p> Name Type Description <code>EventsManager</code> <code>EventsManager</code> <p>The updated events manager.</p>"},{"location":"api/states.html#navix.states.EventsManager.record_key_pickup","title":"<code>record_key_pickup(key, position)</code>","text":"<p>Flags an event when the player picks up a key as happened and returns the updated events manager.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Key</code> <p>The key the player picked up.</p> required <code>position</code> <code>Array</code> <p>The position of the key in the grid.</p> required <p>Returns:</p> Name Type Description <code>EventsManager</code> <code>EventsManager</code> <p>The updated events manager.</p>"},{"location":"api/states.html#navix.states.EventsManager.record_lava_fall","title":"<code>record_lava_fall(lava, position)</code>","text":"<p>Flags an event when the lava falls as happened and returns the updated events manager.</p> <p>Parameters:</p> Name Type Description Default <code>lava</code> <code>Lava</code> <p>The lava that fell.</p> required <code>position</code> <code>Array</code> <p>The position of the lava in the grid.</p> required <p>Returns:</p> Name Type Description <code>EventsManager</code> <code>EventsManager</code> <p>The updated events manager.</p>"},{"location":"api/states.html#navix.states.EventsManager.record_pickup","title":"<code>record_pickup(entity, position)</code>","text":"<p>Flags an event when the player picks up an entity as happened and returns the updated events manager.</p> <p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Entity</code> <p>The entity the player picked up.</p> required <code>position</code> <code>Array</code> <p>The position of the entity in the grid.</p> required <p>Returns:</p> Name Type Description <code>EventsManager</code> <code>EventsManager</code> <p>The updated events manager.</p>"},{"location":"api/states.html#navix.states.EventsManager.record_walk_into","title":"<code>record_walk_into(entity, position)</code>","text":"<p>Flags an event when the player walks into an entity as happened and returns the updated events manager.</p> <p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Entity</code> <p>The entity the player walked into.</p> required <code>position</code> <code>Array</code> <p>The position of the entity in the grid.</p> required <p>Returns:</p> Name Type Description <code>EventsManager</code> <code>EventsManager</code> <p>The updated events manager.</p>"},{"location":"api/states.html#navix.states.EventsManager.record_wall_hit","title":"<code>record_wall_hit(wall, position)</code>","text":"<p>Flags an event when the player hits a wall as happened and returns the updated events manager.</p> <p>Parameters:</p> Name Type Description Default <code>wall</code> <code>Wall</code> <p>The wall the player hit.</p> required <code>position</code> <code>Array</code> <p>The position of the wall in the grid.</p> required <p>Returns:</p> Name Type Description <code>EventsManager</code> <code>EventsManager</code> <p>The updated events manager.</p>"},{"location":"api/states.html#navix.states.State","title":"<code>State</code>","text":"<p>               Bases: <code>PyTreeNode</code></p> <p>The Markovian state of the environment</p>"},{"location":"api/states.html#navix.states.State.cache","title":"<code>cache</code>  <code>instance-attribute</code>","text":"<p>The rendering cache to speed up rendering</p>"},{"location":"api/states.html#navix.states.State.entities","title":"<code>entities = struct.field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The entities in the environment, indexed via entity type string representation. Batched over the number of entities for each type</p>"},{"location":"api/states.html#navix.states.State.events","title":"<code>events = EventsManager()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A struct indicating which events happened this timestep. For example, the goal is reached, or the player is hit by a ball.</p>"},{"location":"api/states.html#navix.states.State.grid","title":"<code>grid</code>  <code>instance-attribute</code>","text":"<p>The base map of the environment that remains constant throughout the training</p>"},{"location":"api/states.html#navix.states.State.key","title":"<code>key</code>  <code>instance-attribute</code>","text":"<p>The random number generator state</p>"},{"location":"api/states.html#navix.states.State.get_balls","title":"<code>get_balls()</code>","text":"<p>Gets the ball entity from the state.</p>"},{"location":"api/states.html#navix.states.State.get_boxes","title":"<code>get_boxes()</code>","text":"<p>Gets the box entity from the state.</p>"},{"location":"api/states.html#navix.states.State.get_doors","title":"<code>get_doors()</code>","text":"<p>Gets the door entity from the state.</p>"},{"location":"api/states.html#navix.states.State.get_entity","title":"<code>get_entity(entity_enum)</code>","text":"<p>Get an entity from the state by its enum.</p> <p>Parameters:</p> Name Type Description Default <code>entity_enum</code> <code>str</code> <p>The enum of the entity to get.</p> required <p>Returns:</p> Name Type Description <code>Entity</code> <code>Entity</code> <p>The entity from the state.</p>"},{"location":"api/states.html#navix.states.State.get_goals","title":"<code>get_goals()</code>","text":"<p>Gets the goal entity from the state.</p>"},{"location":"api/states.html#navix.states.State.get_keys","title":"<code>get_keys()</code>","text":"<p>Gets the key entity from the state.</p>"},{"location":"api/states.html#navix.states.State.get_lavas","title":"<code>get_lavas()</code>","text":"<p>Gets the lava entity from the state.</p>"},{"location":"api/states.html#navix.states.State.get_player","title":"<code>get_player(idx=0)</code>","text":"<p>Gets the player entity from the state.</p>"},{"location":"api/states.html#navix.states.State.get_positions","title":"<code>get_positions()</code>","text":"<p>Get the positions of all the entities in the state.</p>"},{"location":"api/states.html#navix.states.State.get_sprites","title":"<code>get_sprites()</code>","text":"<p>Get the sprites of all the entities in the state.</p>"},{"location":"api/states.html#navix.states.State.get_tags","title":"<code>get_tags()</code>","text":"<p>Get the tags of all the entities in the state.</p>"},{"location":"api/states.html#navix.states.State.get_transparency","title":"<code>get_transparency()</code>","text":"<p>Get the transparency of all the entities in the state.</p>"},{"location":"api/states.html#navix.states.State.get_walls","title":"<code>get_walls()</code>","text":"<p>Gets all the <code>WALL</code> entities from the state.</p>"},{"location":"api/states.html#navix.states.State.set_balls","title":"<code>set_balls(balls)</code>","text":"<p>Sets the ball entity in the state.</p>"},{"location":"api/states.html#navix.states.State.set_boxes","title":"<code>set_boxes(boxes)</code>","text":"<p>Sets the box entity in the state.</p>"},{"location":"api/states.html#navix.states.State.set_doors","title":"<code>set_doors(doors)</code>","text":"<p>Sets the door entity in the state.</p>"},{"location":"api/states.html#navix.states.State.set_entity","title":"<code>set_entity(entity_enum, entity)</code>","text":"<p>Set an entity in the state by its enum.</p> <p>Parameters:</p> Name Type Description Default <code>entity_enum</code> <code>str</code> <p>The enum of the entity to set.</p> required <code>entity</code> <code>Entity</code> <p>The entity to set.</p> required <p>Returns:</p> Name Type Description <code>State</code> <code>State</code> <p>The updated state.</p>"},{"location":"api/states.html#navix.states.State.set_events","title":"<code>set_events(events)</code>","text":"<p>Sets the events in the state.</p>"},{"location":"api/states.html#navix.states.State.set_goals","title":"<code>set_goals(goals)</code>","text":"<p>Sets the goal entity in the state.</p>"},{"location":"api/states.html#navix.states.State.set_keys","title":"<code>set_keys(keys)</code>","text":"<p>Sets the key entity in the state.</p>"},{"location":"api/states.html#navix.states.State.set_player","title":"<code>set_player(player, idx=0)</code>","text":"<p>Sets the player entity in the state. Notice that we only support one player in the environment for now, but this can easily be extended to multiple players.</p>"},{"location":"api/states.html#navix.states.State.set_walls","title":"<code>set_walls(walls)</code>","text":"<p>Sets the <code>WALL</code> entities in the state.</p>"},{"location":"api/tasks.html","title":"Tasks","text":""},{"location":"api/tasks.html#navix.tasks.Task","title":"<code>Task</code>","text":"<p>               Bases: <code>PyTreeNode</code></p> <p>Task formuation as described in https://arxiv.org/abs/1609.01995</p>"},{"location":"api/terminations.html","title":"Terminations","text":""},{"location":"api/terminations.html#navix.terminations.check_truncation","title":"<code>check_truncation(terminated, truncated)</code>","text":"<p>Check if the episode is truncated or terminated, and returns a value that conforms to the <code>StepType</code> enum.</p> <p>Parameters:</p> Name Type Description Default <code>terminated</code> <code>Array</code> <p>A boolean array indicating whether the episode is terminated.</p> required <code>truncated</code> <code>Array</code> <p>A boolean array indicating whether the episode is truncated.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>An integer array that represents the step type.</p>"},{"location":"api/terminations.html#navix.terminations.compose","title":"<code>compose(*term_functions, operator=jnp.any)</code>","text":"<p>Compose termination functions into a single termination function.</p> <p>Parameters:</p> Name Type Description Default <code>*term_functions</code> <code>Callable</code> <p>List of termination functions.</p> <code>()</code> <code>operator</code> <code>Callable</code> <p>Operator to combine the termination functions.</p> <code>any</code> <p>Returns:</p> Name Type Description <code>Callable</code> <code>Callable</code> <p>A single termination function.</p>"},{"location":"api/terminations.html#navix.terminations.on_ball_hit","title":"<code>on_ball_hit(prev_state, action, state)</code>","text":"<p>Check if the ball has hit something using the <code>ball_hit</code> event.</p> <p>Parameters:</p> Name Type Description Default <code>prev_state</code> <code>State</code> <p>The previous state of the game.</p> required <code>action</code> <code>Array</code> <p>The action taken by the player.</p> required <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A boolean array indicating whether the ball has hit something.</p>"},{"location":"api/terminations.html#navix.terminations.on_door_done","title":"<code>on_door_done(prev_state, action, state)</code>","text":"<p>Check if the action <code>done</code> has been called in front of a <code>Door</code> object with the         correct colour.</p> <p>Parameters:</p> Name Type Description Default <code>prev_state</code> <code>State</code> <p>The previous state of the game.</p> required <code>action</code> <code>Array</code> <p>The action taken by the player.</p> required <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A boolean array indicating whether the action <code>done</code> has been called in         front of a <code>Door</code> object with the correct colour.</p>"},{"location":"api/terminations.html#navix.terminations.on_goal_reached","title":"<code>on_goal_reached(prev_state, action, state)</code>","text":"<p>Check if the goal has been reached using the <code>goal_reached</code> event.</p> <p>Parameters:</p> Name Type Description Default <code>prev_state</code> <code>State</code> <p>The previous state of the game.</p> required <code>action</code> <code>Array</code> <p>The action taken by the player.</p> required <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A boolean array indicating whether the goal has been reached.</p>"},{"location":"api/terminations.html#navix.terminations.on_lava_fall","title":"<code>on_lava_fall(prev_state, action, state)</code>","text":"<p>Check if the lava has fallen using the <code>lava_fall</code> event.</p> <p>Parameters:</p> Name Type Description Default <code>prev_state</code> <code>State</code> <p>The previous state of the game.</p> required <code>action</code> <code>Array</code> <p>The action taken by the player.</p> required <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>Array</code> <code>Array</code> <p>A boolean array indicating whether the lava has fallen.</p>"},{"location":"api/transitions.html","title":"Transitions","text":""},{"location":"api/transitions.html#navix.transitions.deterministic_transition","title":"<code>deterministic_transition(state, action, actions_set)</code>","text":"<p>Deterministic transition function. It selects the action from the set of actions and applies it to the state.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state of the game.</p> required <code>action</code> <code>Array</code> <p>The action to be taken.</p> required <code>actions_set</code> <code>Tuple[Callable[[State], State]</code> <p>A set of actions that can be taken.</p> required <p>Returns:</p> Name Type Description <code>State</code> <code>State</code> <p>The new state of the game.</p>"},{"location":"api/transitions.html#navix.transitions.stochastic_transition","title":"<code>stochastic_transition(state, action, actions_set)</code>","text":"<p>Stochastic transition function. It selects the action from the set of actions and applies it to the state, and updates entities that have stochastic transitions, such as balls.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state of the game.</p> required <code>action</code> <code>Array</code> <p>The action to be taken.</p> required <code>actions_set</code> <code>Tuple[Callable[[State], State]</code> <p>A set of actions that can be taken.</p> required <p>Returns:</p> Name Type Description <code>State</code> <code>State</code> <p>The new state of the game.</p>"},{"location":"api/transitions.html#navix.transitions.update_balls","title":"<code>update_balls(state)</code>","text":"<p>Update the position of the balls in the game. Balls move in a random direction if they can, otherwise they stay in place.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The current state of the game.</p> required <p>Returns:</p> Name Type Description <code>State</code> <code>State</code> <p>The new state of the game.</p>"},{"location":"api/agents/index.html","title":"Index","text":""},{"location":"api/agents/agent.html","title":"Agent","text":""},{"location":"api/agents/agent.html#navix.agents.agent.HParams","title":"<code>HParams</code>","text":"<p>               Bases: <code>PyTreeNode</code></p>"},{"location":"api/agents/agent.html#navix.agents.agent.HParams.debug","title":"<code>debug = struct.field(pytree_node=False, default=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to run in debug mode.</p>"},{"location":"api/agents/agent.html#navix.agents.agent.HParams.log_frequency","title":"<code>log_frequency = struct.field(pytree_node=False, default=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>How often to log results.</p>"},{"location":"api/agents/models.html","title":"Models","text":""},{"location":"api/agents/ppo.html","title":"Ppo","text":""},{"location":"api/agents/ppo.html#navix.agents.ppo.PPOHparams","title":"<code>PPOHparams</code>","text":"<p>               Bases: <code>HParams</code></p>"},{"location":"api/agents/ppo.html#navix.agents.ppo.PPOHparams.anneal_lr","title":"<code>anneal_lr = struct.field(pytree_node=False, default=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to anneal the learning rate linearly to 0 at the end of training.</p>"},{"location":"api/agents/ppo.html#navix.agents.ppo.PPOHparams.budget","title":"<code>budget = struct.field(pytree_node=False, default=1000000)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of environment frames to train for.</p>"},{"location":"api/agents/ppo.html#navix.agents.ppo.PPOHparams.clip_eps","title":"<code>clip_eps = 0.2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>PPO clip parameter.</p>"},{"location":"api/agents/ppo.html#navix.agents.ppo.PPOHparams.clip_value_loss","title":"<code>clip_value_loss = struct.field(pytree_node=False, default=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to clip the value loss in the PPO loss.</p>"},{"location":"api/agents/ppo.html#navix.agents.ppo.PPOHparams.ent_coef","title":"<code>ent_coef = 0.01</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Entropy coefficient in the total loss.</p>"},{"location":"api/agents/ppo.html#navix.agents.ppo.PPOHparams.gae_lambda","title":"<code>gae_lambda = 0.95</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Lambda parameter of the TD(lambda) return.</p>"},{"location":"api/agents/ppo.html#navix.agents.ppo.PPOHparams.lr","title":"<code>lr = 0.00025</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Starting learning rate.</p>"},{"location":"api/agents/ppo.html#navix.agents.ppo.PPOHparams.max_grad_norm","title":"<code>max_grad_norm = 0.5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Maximum gradient norm for clipping.</p>"},{"location":"api/agents/ppo.html#navix.agents.ppo.PPOHparams.normalise_advantage","title":"<code>normalise_advantage = struct.field(pytree_node=False, default=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to normalise the advantages in the PPO loss.</p>"},{"location":"api/agents/ppo.html#navix.agents.ppo.PPOHparams.num_envs","title":"<code>num_envs = struct.field(pytree_node=False, default=16)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of parallel environments to run.</p>"},{"location":"api/agents/ppo.html#navix.agents.ppo.PPOHparams.num_epochs","title":"<code>num_epochs = struct.field(pytree_node=False, default=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of epochs to train for.</p>"},{"location":"api/agents/ppo.html#navix.agents.ppo.PPOHparams.num_minibatches","title":"<code>num_minibatches = struct.field(pytree_node=False, default=8)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of minibatches to split the data into for training.</p>"},{"location":"api/agents/ppo.html#navix.agents.ppo.PPOHparams.num_steps","title":"<code>num_steps = struct.field(pytree_node=False, default=128)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of steps to run in each environment per update.</p>"},{"location":"api/agents/ppo.html#navix.agents.ppo.PPOHparams.vf_coef","title":"<code>vf_coef = 0.5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Value function coefficient in the total loss.</p>"},{"location":"api/environments/index.html","title":"Index","text":""},{"location":"api/environments/crossings.html","title":"Crossings","text":""},{"location":"api/environments/dist_shift.html","title":"Dist shift","text":""},{"location":"api/environments/door_key.html","title":"Door key","text":""},{"location":"api/environments/dynamic_obstacles.html","title":"Dynamic obstacles","text":""},{"location":"api/environments/empty.html","title":"Empty","text":""},{"location":"api/environments/environment.html","title":"Environment","text":""},{"location":"api/environments/environment.html#navix.environments.environment.Environment","title":"<code>Environment</code>","text":"<p>               Bases: <code>PyTreeNode</code></p>"},{"location":"api/environments/environment.html#navix.environments.environment.StepType","title":"<code>StepType</code>","text":"<p>               Bases: <code>PyTreeNode</code></p>"},{"location":"api/environments/environment.html#navix.environments.environment.StepType.TERMINATION","title":"<code>TERMINATION = jnp.asarray(2)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The episode ended and the current state is an absorbing state.</p>"},{"location":"api/environments/environment.html#navix.environments.environment.StepType.TRANSITION","title":"<code>TRANSITION = jnp.asarray(0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Standard timestep transition: the episode continues</p>"},{"location":"api/environments/environment.html#navix.environments.environment.StepType.TRUNCATION","title":"<code>TRUNCATION = jnp.asarray(1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The environment reached its maximum number of timesteps. The episode ended, but the agent could have still collected rewards. The value of the state is not 0</p>"},{"location":"api/environments/environment.html#navix.environments.environment.Timestep","title":"<code>Timestep</code>","text":"<p>               Bases: <code>PyTreeNode</code></p>"},{"location":"api/environments/environment.html#navix.environments.environment.Timestep.action","title":"<code>action</code>  <code>instance-attribute</code>","text":"<p>The action taken by the agent at the current timestep a_t = $\\pi(s_t)$, where $s_t$ is <code>state</code></p>"},{"location":"api/environments/environment.html#navix.environments.environment.Timestep.info","title":"<code>info = struct.field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Additional information about the environment. Useful for accumulations (e.g. returns)</p>"},{"location":"api/environments/environment.html#navix.environments.environment.Timestep.observation","title":"<code>observation</code>  <code>instance-attribute</code>","text":"<p>The observation corresponding to the current state (for POMDPs)</p>"},{"location":"api/environments/environment.html#navix.environments.environment.Timestep.reward","title":"<code>reward</code>  <code>instance-attribute</code>","text":"<p>The reward $r_{t=1}$ received by the agent after taking action $a_t$</p>"},{"location":"api/environments/environment.html#navix.environments.environment.Timestep.state","title":"<code>state</code>  <code>instance-attribute</code>","text":"<p>The true state of the MDP, $s_t$ before taking action <code>action</code></p>"},{"location":"api/environments/environment.html#navix.environments.environment.Timestep.step_type","title":"<code>step_type</code>  <code>instance-attribute</code>","text":"<p>The type of the current timestep, 0 for TRANSITION, 1 for TRUNCATION, 2 for TERMINATION</p>"},{"location":"api/environments/environment.html#navix.environments.environment.Timestep.t","title":"<code>t</code>  <code>instance-attribute</code>","text":"<p>The number of timesteps elapsed from the last reset of the environment</p>"},{"location":"api/environments/four_rooms.html","title":"Four rooms","text":""},{"location":"api/environments/go_to_door.html","title":"Go to door","text":""},{"location":"api/environments/key_corridor.html","title":"Key corridor","text":""},{"location":"api/environments/lava_gap.html","title":"Lava gap","text":""},{"location":"api/environments/registry.html","title":"Registry","text":""},{"location":"api/environments/wrappers.html","title":"Wrappers","text":""},{"location":"api/rendering/index.html","title":"Index","text":""},{"location":"api/rendering/cache.html","title":"Cache","text":""},{"location":"api/rendering/cache.html#navix.rendering.cache.RenderingCache","title":"<code>RenderingCache</code>","text":"<p>               Bases: <code>PyTreeNode</code></p>"},{"location":"api/rendering/cache.html#navix.rendering.cache.RenderingCache.patches","title":"<code>patches</code>  <code>instance-attribute</code>","text":"<p>A flat set of patches representing the RGB values of each tile in the base map</p>"},{"location":"api/rendering/cache.html#navix.rendering.cache.tile_grid","title":"<code>tile_grid(grid, tile)</code>","text":"<p>Tiles a grid (H, W) with equal tiles <code>tiles</code> (w, h, 3) to get a final array of shape (H * h, W * w, 3) and dtype <code>jnp.uint8</code></p>"},{"location":"api/rendering/registry.html","title":"Registry","text":""},{"location":"api/rendering/registry.html#navix.rendering.registry.SpritesRegistry","title":"<code>SpritesRegistry</code>","text":""},{"location":"api/rendering/registry.html#navix.rendering.registry.SpritesRegistry.build_registry","title":"<code>build_registry()</code>","text":"<p>Populates the sprites registry for all entities.</p>"},{"location":"api/rendering/registry.html#navix.rendering.registry.load_sprite","title":"<code>load_sprite(name)</code>","text":"<p>Loads an image from disk in RGB space. Args:     path(str): the filepath of the image on disk</p> <p>Returns:</p> Type Description <code>Array</code> <p>a jax.Array of shape (H, W, C)</p>"},{"location":"benchmarks/index.html","title":"Index","text":"<p>Coming soon</p>"},{"location":"benchmarks/envs.html","title":"Scaling with the number of environments","text":"<p>In this notebook, we will look at the difference in THROUGHPUT between MiniGrid and NAVIX environments: how the performance scales with the number of environments. We will still use random actions, but the environments now run in batch mode.</p> In\u00a0[1]: Copied! <pre>import os\nos.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = \"hide\"\n# See https://stackoverflow.com/questions/51464455/how-to-disable-welcome-message-when-importing-pygame\n</pre> import os os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = \"hide\" # See https://stackoverflow.com/questions/51464455/how-to-disable-welcome-message-when-importing-pygame In\u00a0[\u00a0]: Copied! <pre>import time\nimport timeit\nimport gymnasium as gym\nimport matplotlib.pyplot as plt\nfrom minigrid.wrappers import ImgObsWrapper\n\ndef benchmark_minigrid(num_envs):\n    env = gym.make_vec(\n        \"MiniGrid-Empty-8x8-v0\",\n        num_envs=num_envs,\n        wrappers=[ImgObsWrapper],\n    )\n    env.reset()\n\n    for _ in range(1_000):\n        action = env.action_space.sample()\n        timestep = env.step(action)\n    return timestep\n\n\nminigrid_times = {}\ni = 2\nwhile True:\n    try:\n        minigrid_times[i] = timeit.timeit(lambda: benchmark_minigrid(i), number=1)\n        time.sleep(1)\n        i *= 2\n    except:\n        print(\"Max num_envs reached\", i)\n        break\n</pre> import time import timeit import gymnasium as gym import matplotlib.pyplot as plt from minigrid.wrappers import ImgObsWrapper  def benchmark_minigrid(num_envs):     env = gym.make_vec(         \"MiniGrid-Empty-8x8-v0\",         num_envs=num_envs,         wrappers=[ImgObsWrapper],     )     env.reset()      for _ in range(1_000):         action = env.action_space.sample()         timestep = env.step(action)     return timestep   minigrid_times = {} i = 2 while True:     try:         minigrid_times[i] = timeit.timeit(lambda: benchmark_minigrid(i), number=1)         time.sleep(1)         i *= 2     except:         print(\"Max num_envs reached\", i)         break <p>It scales quite linearly with the number of steps. That's a reasonable time for a single environment that runs on the CPU.</p> In\u00a0[\u00a0]: Copied! <pre>import jax\nimport navix as nx\n\n\n@jax.jit\n@jax.vmap\ndef benchmark_navix(seed):\n    env = nx.make('Navix-Empty-8x8-v0') # Create the environment\n    timestep = env.reset(seed)\n    actions = jax.random.randint(seed, (1_000,), 0, env.action_space.n)\n\n    def body_fun(timestep, action):\n        timestep = env.step(timestep, action)  # Update the environment state\n        return timestep, ()\n\n    return jax.lax.scan(body_fun, timestep, actions, unroll=10)[0]\n\nnavix_times = {}\ni = 2\nwhile True:\n    try:\n        seeds = jax.random.split(jax.random.PRNGKey(0), i)\n        benchmark_navix_jit = benchmark_navix.lower(seeds).compile()\n        navix_times[i] = timeit.timeit(lambda: benchmark_navix_jit(seeds), number=1)\n        i *= 2\n    except:\n        print(\"Max num_envs reached\", i)\n        break\n</pre> import jax import navix as nx   @jax.jit @jax.vmap def benchmark_navix(seed):     env = nx.make('Navix-Empty-8x8-v0') # Create the environment     timestep = env.reset(seed)     actions = jax.random.randint(seed, (1_000,), 0, env.action_space.n)      def body_fun(timestep, action):         timestep = env.step(timestep, action)  # Update the environment state         return timestep, ()      return jax.lax.scan(body_fun, timestep, actions, unroll=10)[0]  navix_times = {} i = 2 while True:     try:         seeds = jax.random.split(jax.random.PRNGKey(0), i)         benchmark_navix_jit = benchmark_navix.lower(seeds).compile()         navix_times[i] = timeit.timeit(lambda: benchmark_navix_jit(seeds), number=1)         i *= 2     except:         print(\"Max num_envs reached\", i)         break"},{"location":"benchmarks/envs.html#scaling-with-the-number-of-environments","title":"Scaling with the number of environments\u00b6","text":""},{"location":"benchmarks/envs.html#tldr","title":"TL;DR;\u00b6","text":"<p>NAVIX can scale up to over $2M$ environments in parallel in less than $10$s, less than the time required by MiniGrid to run a single environment.</p>"},{"location":"benchmarks/envs.html#benchmarking-minigrid","title":"Benchmarking MiniGrid\u00b6","text":"<p>Let's start with MiniGrid.</p>"},{"location":"benchmarks/envs.html#benchmarking-navix","title":"Benchmarking NAVIX\u00b6","text":"<p>Let's see how NAVIX compares to MiniGrid with a single environment.</p>"},{"location":"benchmarks/envs.html#conclusions","title":"Conclusions\u00b6","text":"<p>NAVIX can scale up to $2^{21} = 2097152$ environments (over $2M$ environments in parallel!) and still do that in less than the time required by MiniGrid to run a single environment.</p>"},{"location":"benchmarks/timesteps.html","title":"Scaling with the number of timesteps","text":"<p>How faster is NAVIX than MiniGrid?</p> <p>In this notebook, we will answer this question by comparing the two libraries in terms of their performance.</p> <p>We will look at:</p> <ul> <li>The raw time it takes to run 100_000 episodes of a simple environment in both libraries.</li> <li>How the performance scales with the number of parallel environments</li> </ul> In\u00a0[9]: Copied! <pre>import os\nos.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = \"hide\"\n# See https://stackoverflow.com/questions/51464455/how-to-disable-welcome-message-when-importing-pygame\n</pre> import os os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = \"hide\" # See https://stackoverflow.com/questions/51464455/how-to-disable-welcome-message-when-importing-pygame In\u00a0[\u00a0]: Copied! <pre>import gymnasium as gym\nimport timeit\nimport matplotlib.pyplot as plt\n\nnum_steps_set = (\n    10,\n    100,\n    1_000,\n    10_000,\n    100_000,\n    1_000_000,\n)  # we won't for further because MiniGrid becomes too slow\n\ndef benchmark_minigrid(num_steps):\n    env = gym.make(\"MiniGrid-Empty-8x8-v0\")\n    env.reset()\n\n    for _ in range(num_steps):\n        action = env.action_space.sample()\n        timestep = env.step(action)\n    return timestep\n\nminigrid_times = {}\nfor i in num_steps_set:\n    minigrid_times[i] = timeit.timeit(lambda: benchmark_minigrid(i), number=1)\n</pre> import gymnasium as gym import timeit import matplotlib.pyplot as plt  num_steps_set = (     10,     100,     1_000,     10_000,     100_000,     1_000_000, )  # we won't for further because MiniGrid becomes too slow  def benchmark_minigrid(num_steps):     env = gym.make(\"MiniGrid-Empty-8x8-v0\")     env.reset()      for _ in range(num_steps):         action = env.action_space.sample()         timestep = env.step(action)     return timestep  minigrid_times = {} for i in num_steps_set:     minigrid_times[i] = timeit.timeit(lambda: benchmark_minigrid(i), number=1) <p>It scales quite linearly with the number of steps. That's a reasonable time for a single environment that runs on the CPU.</p> In\u00a0[41]: Copied! <pre>import functools\nimport jax\nimport navix as nx\n\n\n@functools.partial(jax.jit, static_argnums=1)\ndef benchmark_navix(seed, num_steps):\n    env = nx.make('Navix-Empty-8x8-v0') # Create the environment\n    key = jax.random.PRNGKey(seed)\n    timestep = env.reset(key)\n    actions = jax.random.randint(key, (num_steps,), 0, env.action_space.n)\n\n    def body_fun(timestep, action):\n        timestep = env.step(timestep, action)  # Update the environment state\n        return timestep, ()\n\n    return jax.lax.scan(body_fun, timestep, actions, unroll=10)[0]\n\n\nseed = jax.random.PRNGKey(0)\nnavix_times = {}\nfor i in num_steps_set:\n    benchmark_navix_jit = benchmark_navix.lower(seed, i).compile()  # AOT compilation\n    navix_times[i] = timeit.timeit(lambda: benchmark_navix_jit(seed), number=1)\n</pre> import functools import jax import navix as nx   @functools.partial(jax.jit, static_argnums=1) def benchmark_navix(seed, num_steps):     env = nx.make('Navix-Empty-8x8-v0') # Create the environment     key = jax.random.PRNGKey(seed)     timestep = env.reset(key)     actions = jax.random.randint(key, (num_steps,), 0, env.action_space.n)      def body_fun(timestep, action):         timestep = env.step(timestep, action)  # Update the environment state         return timestep, ()      return jax.lax.scan(body_fun, timestep, actions, unroll=10)[0]   seed = jax.random.PRNGKey(0) navix_times = {} for i in num_steps_set:     benchmark_navix_jit = benchmark_navix.lower(seed, i).compile()  # AOT compilation     navix_times[i] = timeit.timeit(lambda: benchmark_navix_jit(seed), number=1)"},{"location":"benchmarks/timesteps.html#scaling-with-the-number-of-timesteps","title":"Scaling with the number of timesteps\u00b6","text":""},{"location":"benchmarks/timesteps.html#tldr","title":"TL;DR;\u00b6","text":"<p>NAVIX is at least $10\\times$ faster than MiniGrid. The performance of NAVIX scales constantly with the number of parallel environments up to $10^4$, after which it starts to scale at least linearly, probably due to memory saturation.</p>"},{"location":"benchmarks/timesteps.html#benchmarking-minigrid","title":"Benchmarking Minigrid\u00b6","text":"<p>Let's start with MiniGrid.</p>"},{"location":"benchmarks/timesteps.html#benchmarking-navix","title":"Benchmarking NAVIX\u00b6","text":"<p>Let's see how NAVIX compares to MiniGrid with a single environment.</p>"},{"location":"benchmarks/timesteps.html#conclusions","title":"Conclusions\u00b6","text":"<p>The plot shows that NAVIX is about $10 \\times$ faster than MiniGrid for a single environment at $10^6$ steps.</p> <p>This is not all. NAVIX is designed to scale with the number of parallel environments. Let's see how it performs in the batched case with the next benchmark.</p>"},{"location":"examples/customisation.html","title":"Customising the Environment","text":""},{"location":"examples/customisation.html#customising-the-environment","title":"Customising the Environment\u00b6","text":""},{"location":"examples/getting_started.html","title":"NAVIX 101","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nimport jax\nimport jax.numpy as jnp\nimport navix as nx\n\n# Create the environment\nenv = nx.make('Navix-DoorKey-8x8-v0', observation_fn=nx.observations.rgb)\nkey = jax.random.PRNGKey(0)\ntimestep = env.reset(key)\n\ndef render(obs, title):\n    plt.imshow(obs)\n    plt.title(title)\n    plt.axis('off')\n    plt.show()\n\nprint(timestep.observation.shape)\nrender(timestep.observation, \"Initial observation\")\n</pre> import matplotlib.pyplot as plt import jax import jax.numpy as jnp import navix as nx  # Create the environment env = nx.make('Navix-DoorKey-8x8-v0', observation_fn=nx.observations.rgb) key = jax.random.PRNGKey(0) timestep = env.reset(key)  def render(obs, title):     plt.imshow(obs)     plt.title(title)     plt.axis('off')     plt.show()  print(timestep.observation.shape) render(timestep.observation, \"Initial observation\") <pre>(64, 64, 3)\n</pre> <p>Take-home message:</p> <ol> <li>To sample an initial environment state (<code>timestep</code>), we need to pass the <code>key</code> (seed) argument to the environment constructor. This is because NAVIX uses JAX's PRNGKey to generate random numbers. You can read more here</li> <li><code>env.reset</code> returns a <code>navix.Timestep</code> object, which contains all the useful information.</li> </ol> In\u00a0[3]: Copied! <pre>def unroll(key, num_steps=5):\n    timestep = env.reset(key)\n    actions = jax.random.randint(key, (num_steps,), 0, env.action_space.n)\n\n    steps = [timestep]\n    for action in actions:\n        timestep = env.step(timestep, action)\n        steps.append(timestep)\n\n    return steps\n\n# Unroll and print steps\nsteps = unroll(key, num_steps=5)\nrender(steps[-1].observation, \"Last observation\")\n</pre> def unroll(key, num_steps=5):     timestep = env.reset(key)     actions = jax.random.randint(key, (num_steps,), 0, env.action_space.n)      steps = [timestep]     for action in actions:         timestep = env.step(timestep, action)         steps.append(timestep)      return steps  # Unroll and print steps steps = unroll(key, num_steps=5) render(steps[-1].observation, \"Last observation\")  <p>Take home message:</p> <ol> <li><code>env.step</code>, take two arguments: the current state of the environment (the <code>timestep</code>), and the action to take, and returns the new environment state.</li> <li>Despite <code>env.step</code> being stochastic, it does not take a <code>key</code> argument. This is because NAVIX manages the PRNGKey internally.</li> <li>You can still sample different environments by sampling different <code>keys</code> when creating the environment.</li> </ol> <p>This way of using NAVIX is suboptimal (and probably slower than using <code>gym</code>), as it does not take advantage of JAX's JIT compiler. We'll see how to do that in the next section.</p> In\u00a0[4]: Copied! <pre>@jax.jit\ndef env_step_jit(timestep, action):\n    return env.step(timestep, action)\n\ndef unroll_jit_step(key, num_steps=10):\n    timestep = env.reset(key)\n    actions = jax.random.randint(key, (num_steps,), 0, env.action_space.n)\n\n    steps = [timestep]\n    for action in actions:\n        timestep = env_step_jit(timestep, action)\n        steps.append(timestep)\n\n    return steps\n\n# Example usage\nsteps = unroll_jit_step(key, num_steps=10)\nrender(steps[-1].observation, \"Last observation\")\n</pre> @jax.jit def env_step_jit(timestep, action):     return env.step(timestep, action)  def unroll_jit_step(key, num_steps=10):     timestep = env.reset(key)     actions = jax.random.randint(key, (num_steps,), 0, env.action_space.n)      steps = [timestep]     for action in actions:         timestep = env_step_jit(timestep, action)         steps.append(timestep)      return steps  # Example usage steps = unroll_jit_step(key, num_steps=10) render(steps[-1].observation, \"Last observation\") <p>Let's compare the two head to head.</p> In\u00a0[5]: Copied! <pre>%timeit -n 1 -r 3 unroll(key, num_steps=10)\n</pre> %timeit -n 1 -r 3 unroll(key, num_steps=10) <pre>27.4 s \u00b1 130 ms per loop (mean \u00b1 std. dev. of 3 runs, 1 loop each)\n</pre> In\u00a0[6]: Copied! <pre>%timeit -n 1 -r 3 lambda: unroll_jit_step(key, num_steps=10)[-1].block_until_ready()\n</pre> %timeit -n 1 -r 3 lambda: unroll_jit_step(key, num_steps=10)[-1].block_until_ready() <pre>328 ns \u00b1 153 ns per loop (mean \u00b1 std. dev. of 3 runs, 1 loop each)\n</pre> <p>Notice that it's roughly in the order of $10^9$ times faster compared to its unjitted counterpart.</p> <p>But that's not the end of the story. We can go even further and <code>jit</code> the whole simulation loop, which improves performance even more.</p> In\u00a0[3]: Copied! <pre>def unroll_scan(key, num_steps=10):\n    timestep = env.reset(key)\n    actions = jax.random.randint(key, (num_steps,), 0, env.action_space.n)\n\n    timestep, _ = jax.lax.scan(\n        lambda timestep, action: (env.step(timestep, action), ()),\n        timestep,\n        actions,\n        unroll=10,\n    )\n    return timestep\n\n\n# Example usage\nunroll_jit_loop = jax.jit(unroll_scan, static_argnums=(1,))\ntimestep = unroll_jit_loop(key, num_steps=10)\nrender(timestep.observation, \"Last observation\")\n</pre> def unroll_scan(key, num_steps=10):     timestep = env.reset(key)     actions = jax.random.randint(key, (num_steps,), 0, env.action_space.n)      timestep, _ = jax.lax.scan(         lambda timestep, action: (env.step(timestep, action), ()),         timestep,         actions,         unroll=10,     )     return timestep   # Example usage unroll_jit_loop = jax.jit(unroll_scan, static_argnums=(1,)) timestep = unroll_jit_loop(key, num_steps=10) render(timestep.observation, \"Last observation\") In\u00a0[11]: Copied! <pre>%timeit -n 10 -r 5 unroll_jit_step(key, num_steps=10)\n</pre> %timeit -n 10 -r 5 unroll_jit_step(key, num_steps=10) <pre>40.5 ms \u00b1 1.49 ms per loop (mean \u00b1 std. dev. of 5 runs, 10 loops each)\n</pre> In\u00a0[12]: Copied! <pre>%timeit -n 10 -r 5 unroll_jit_loop(key, num_steps=10).t.block_until_ready()\n</pre> %timeit -n 10 -r 5 unroll_jit_loop(key, num_steps=10).t.block_until_ready() <pre>353 \u00b5s \u00b1 71.3 \u00b5s per loop (mean \u00b1 std. dev. of 5 runs, 10 loops each)\n</pre> <p>We improved the performance by three more orders of magnitude, and we are at $10^12$. This is because we are now compiling the whole simulation loop, not just the <code>step</code> function.</p> <p>That's still not the end of the story. We can improve the performance even more by using <code>jax.vmap</code> to parallelize multiple environment simulations.</p> In\u00a0[10]: Copied! <pre># Let's compile the function ahead of time\nnum_envs = 32\nkeys = jax.random.split(key, num_envs)\nunroll_batched = jax.jit(jax.vmap(unroll_scan, in_axes=(0, None)), static_argnums=(1,)).lower(keys, 10).compile()\n</pre> # Let's compile the function ahead of time num_envs = 32 keys = jax.random.split(key, num_envs) unroll_batched = jax.jit(jax.vmap(unroll_scan, in_axes=(0, None)), static_argnums=(1,)).lower(keys, 10).compile() In\u00a0[17]: Copied! <pre># and run it\nlast_steps = unroll_batched(keys)\nrender(last_steps.observation[0], \"Last observation of env 0\")\nprint(\"Batch size of the results\", last_steps.reward.shape[0])\n</pre> # and run it last_steps = unroll_batched(keys) render(last_steps.observation[0], \"Last observation of env 0\") print(\"Batch size of the results\", last_steps.reward.shape[0]) <pre>Batch size of the results 32\n</pre> <p>We can benchmark the performance of the batched simulation as well.</p> In\u00a0[19]: Copied! <pre>%timeit -n 10 -r 5 unroll_batched(keys).t.block_until_ready()\n</pre> %timeit -n 10 -r 5 unroll_batched(keys).t.block_until_ready() <pre>686 \u00b5s \u00b1 215 \u00b5s per loop (mean \u00b1 std. dev. of 5 runs, 10 loops each)\n</pre> <p>Which takes roughly twice as long as the single simulation. An increment of $16\\times$, roughly.</p> <p>And we can scale this up to as many simulations as we want. We get to 32768 environments on a NVIDIA A100 GPU 80Gb.</p> <p>Feel free to scale this up if you are GPU-richer.</p> In\u00a0[29]: Copied! <pre># Let's compile the function ahead of time\nnum_envs = 32768\nkeys = jax.random.split(key, num_envs)\nunroll_batched = jax.jit(jax.vmap(unroll_scan, in_axes=(0, None)), static_argnums=(1,)).lower(keys, 10).compile()\n</pre> # Let's compile the function ahead of time num_envs = 32768 keys = jax.random.split(key, num_envs) unroll_batched = jax.jit(jax.vmap(unroll_scan, in_axes=(0, None)), static_argnums=(1,)).lower(keys, 10).compile() In\u00a0[30]: Copied! <pre>%timeit -n 10 -r 5 unroll_batched(keys).t.block_until_ready()\n</pre> %timeit -n 10 -r 5 unroll_batched(keys).t.block_until_ready() <pre>8.46 ms \u00b1 1.06 ms per loop (mean \u00b1 std. dev. of 5 runs, 10 loops each)\n</pre> <p>That's a $(32768 * 10) / 0.00846 = 387,218,045$ : a bit less than $400M$ frames per second.</p>"},{"location":"examples/getting_started.html#navix-101","title":"NAVIX 101\u00b6","text":"<p>This tutorial will guide you through the basics of using NAVIX. You will learn:</p> <ul> <li>How to create a <code>navix.Environment</code>,</li> <li>A vanilla, suboptimal interaction with it,</li> <li>How to <code>jax.jit</code> compile the environment for faster execution</li> <li>How to run batched simulations</li> </ul>"},{"location":"examples/getting_started.html#installation","title":"Installation\u00b6","text":"<p>For a full guide on how to install NAVIX and its dependencies, please refer to the official installation guide For a quickstart, you can install NAVIX via pip:</p> <pre>pip install navix\n</pre> <p>This will provide a standard CPU-based JAX installation. If you want to use a GPU, please install JAX with the appropriate backend.</p>"},{"location":"examples/getting_started.html#creating-an-environment","title":"Creating an Environment\u00b6","text":"<p>NAVIX provides a variety of MiniGrid environments. You can find an exhaustive list here. If the environment you are looking for is not listed, please open an new feature request.</p> <p>Now, let's create a simple DoorKey environment. The syntax is similar to the usual <code>gym.make</code>.</p>"},{"location":"examples/getting_started.html#the-environment-interface","title":"The environment interface\u00b6","text":"<p>We can now simulate a sequence of actions in the environment. For this example, we'll make the agent take random actions.</p>"},{"location":"examples/getting_started.html#optimizing-with-jax","title":"<code>Optimizing with JAX</code>\u00b6","text":"<p>One of the major perks of NAVIX is its performance optimization capabilities through JAX. We can use JAX's <code>jit</code> and <code>vmap</code> to compile and parallelize our simulation code. We can compile the <code>step</code> function to make it faster. This is done by using the <code>jax.jit</code> decorator.</p>"},{"location":"examples/getting_started.html#jit-compilation","title":"JIT Compilation\u00b6","text":""},{"location":"examples/getting_started.html#batched-environments","title":"Batched environments\u00b6","text":"<p>We can run multiple simulations in parallel using <code>vmap</code>.</p>"},{"location":"examples/getting_started.html#conclusion","title":"Conclusion\u00b6","text":"<p>This tutorial demonstrated the basic usage and key features of NAVIX, including environment creation, running simulations, performance optimization with JAX. We wet from running a single environment in around 27s, to running 32768 environment in roughly around 8ms, with a throughput of 400M fps. In comparison, MiniGrid runs at roughly 3K fps.</p> <p>Check the NAVIX paper for more details on the performance of NAVIX. For more advanced usage and examples, refer to the NAVIX examples.</p> <p>In the next tutorial we will see how to train a simple PPO agent on a NAVIX environment.</p>"},{"location":"examples/ppo.html","title":"Training a PPO agent","text":"In\u00a0[6]: Copied! <pre>from dataclasses import dataclass, field\nimport numpy as np\nimport jax\nimport jax.numpy as jnp\nimport navix as nx\nfrom navix import observations\nfrom navix.agents import PPO, PPOHparams, ActorCritic\nfrom navix.environments.environment import Environment\n\n# set persistent compilation cache directory to avoid recompiling JAX code\njax.config.update(\"jax_compilation_cache_dir\", \"/tmp/jax-cache/\")\n</pre> from dataclasses import dataclass, field import numpy as np import jax import jax.numpy as jnp import navix as nx from navix import observations from navix.agents import PPO, PPOHparams, ActorCritic from navix.environments.environment import Environment  # set persistent compilation cache directory to avoid recompiling JAX code jax.config.update(\"jax_compilation_cache_dir\", \"/tmp/jax-cache/\") In\u00a0[7]: Copied! <pre>def FlattenObsWrapper(env: Environment):\n    \"\"\"A wrapper to flatten the observation space of the environment.\"\"\"\n    flatten_obs_fn = lambda x: jnp.ravel(env.observation_fn(x))\n    flatten_obs_shape = (int(np.prod(env.observation_space.shape)),)\n    return env.replace(\n        observation_fn=flatten_obs_fn,\n        observation_space=env.observation_space.replace(shape=flatten_obs_shape),\n    )\n</pre> def FlattenObsWrapper(env: Environment):     \"\"\"A wrapper to flatten the observation space of the environment.\"\"\"     flatten_obs_fn = lambda x: jnp.ravel(env.observation_fn(x))     flatten_obs_shape = (int(np.prod(env.observation_space.shape)),)     return env.replace(         observation_fn=flatten_obs_fn,         observation_space=env.observation_space.replace(shape=flatten_obs_shape),     ) In\u00a0[8]: Copied! <pre># Create and configure the environment\nenv_id = \"Navix-DoorKey-5x5-v0\"\nenv = nx.make(\n    env_id,\n    observation_fn=observations.symbolic_first_person,\n)\nenv = FlattenObsWrapper(env)\n</pre> # Create and configure the environment env_id = \"Navix-DoorKey-5x5-v0\" env = nx.make(     env_id,     observation_fn=observations.symbolic_first_person, ) env = FlattenObsWrapper(env) In\u00a0[9]: Copied! <pre>agent = PPO(\n    hparams=PPOHparams(),\n    network=ActorCritic(\n        action_dim=len(env.action_set),\n    ),\n    env=env,\n)\n</pre> agent = PPO(     hparams=PPOHparams(),     network=ActorCritic(         action_dim=len(env.action_set),     ),     env=env, ) In\u00a0[12]: Copied! <pre># Set up and run the experiment\nnum_seeds = 5\n\nexperiment = nx.Experiment(\n    name=\"NAVIX + PPO (Tutorial)\",\n    agent=agent,\n    env=env,\n    env_id=env_id,\n    seeds=tuple(range(num_seeds)),\n)\ntrain_state, logs = experiment.run(do_log=False)\n</pre> # Set up and run the experiment num_seeds = 5  experiment = nx.Experiment(     name=\"NAVIX + PPO (Tutorial)\",     agent=agent,     env=env,     env_id=env_id,     seeds=tuple(range(num_seeds)), ) train_state, logs = experiment.run(do_log=False) <pre>Running experiment with the following configuration:\n{'name': 'NAVIX + PPO (Tutorial)', 'agent': PPO(hparams=PPOHparams(debug=False, log_frequency=1, log_render=False, budget=1000000, num_envs=16, num_steps=128, num_minibatches=8, num_epochs=1, gae_lambda=0.95, clip_eps=0.2, ent_coef=0.01, vf_coef=0.5, max_grad_norm=0.5, lr=0.00025, anneal_lr=True, normalise_advantage=True, clip_value_loss=True), network=ActorCritic(\n    # attributes\n    action_dim = 7\n    actor_encoder = MLPEncoder(\n        # attributes\n        hidden_size = 64\n    )\n    critic_encoder = MLPEncoder(\n        # attributes\n        hidden_size = 64\n    )\n), env=DoorKey(height=5, width=5, max_steps=100, observation_space=Discrete(shape=(84,), dtype=&lt;class 'jax.numpy.uint8'&gt;, minimum=Array(0, dtype=int32, weak_type=True), maximum=Array(255, dtype=int32, weak_type=True)), action_space=Discrete(shape=(), dtype=&lt;class 'jax.numpy.int32'&gt;, minimum=Array(0, dtype=int32, weak_type=True), maximum=Array(6, dtype=int32, weak_type=True)), reward_space=Continuous(shape=(), dtype=&lt;class 'jax.numpy.float32'&gt;, minimum=Array(-1., dtype=float32, weak_type=True), maximum=Array(1., dtype=float32, weak_type=True)), gamma=0.99, penality_coeff=0.0, observation_fn=&lt;function FlattenObsWrapper.&lt;locals&gt;.&lt;lambda&gt; at 0x7f8cf43eae60&gt;, reward_fn=&lt;function on_goal_reached at 0x7f8e8c796560&gt;, termination_fn=&lt;function on_goal_reached at 0x7f8e8c796cb0&gt;, transitions_fn=&lt;function stochastic_transition at 0x7f8e8c797010&gt;, action_set=(&lt;function rotate_ccw at 0x7f8e8c795750&gt;, &lt;function rotate_cw at 0x7f8e8c7956c0&gt;, &lt;function forward at 0x7f8e8c7957e0&gt;, &lt;function pickup at 0x7f8e8c795a20&gt;, &lt;function drop at 0x7f8e8c795ab0&gt;, &lt;function toggle at 0x7f8e8c795b40&gt;, &lt;function done at 0x7f8e8c795c60&gt;), random_start=False)), 'env': DoorKey(height=5, width=5, max_steps=100, observation_space=Discrete(shape=(84,), dtype=&lt;class 'jax.numpy.uint8'&gt;, minimum=Array(0, dtype=int32, weak_type=True), maximum=Array(255, dtype=int32, weak_type=True)), action_space=Discrete(shape=(), dtype=&lt;class 'jax.numpy.int32'&gt;, minimum=Array(0, dtype=int32, weak_type=True), maximum=Array(6, dtype=int32, weak_type=True)), reward_space=Continuous(shape=(), dtype=&lt;class 'jax.numpy.float32'&gt;, minimum=Array(-1., dtype=float32, weak_type=True), maximum=Array(1., dtype=float32, weak_type=True)), gamma=0.99, penality_coeff=0.0, observation_fn=&lt;function FlattenObsWrapper.&lt;locals&gt;.&lt;lambda&gt; at 0x7f8cf43eae60&gt;, reward_fn=&lt;function on_goal_reached at 0x7f8e8c796560&gt;, termination_fn=&lt;function on_goal_reached at 0x7f8e8c796cb0&gt;, transitions_fn=&lt;function stochastic_transition at 0x7f8e8c797010&gt;, action_set=(&lt;function rotate_ccw at 0x7f8e8c795750&gt;, &lt;function rotate_cw at 0x7f8e8c7956c0&gt;, &lt;function forward at 0x7f8e8c7957e0&gt;, &lt;function pickup at 0x7f8e8c795a20&gt;, &lt;function drop at 0x7f8e8c795ab0&gt;, &lt;function toggle at 0x7f8e8c795b40&gt;, &lt;function done at 0x7f8e8c795c60&gt;), random_start=False), 'env_id': 'Navix-DoorKey-5x5-v0', 'seeds': (0, 1, 2, 3, 4), 'group': ''}\nCompiling training function...\nCompilation time cost: 22.017271041870117\nTraining agent...\nTraining time cost: 9.208281755447388\nTraining complete\nCompilation time cost: 22.017271041870117\nTraining time cost: 9.208281755447388\nTotal time cost: 31.225552797317505\n</pre> <p>Notice that not only the unrolling of the environment is <code>jit</code>ted, but the full training loop is, very much in the spirit of PureJAXRL.</p> <p>This allows us to run the entire training, included running multiple (5) seeds, in only 7s.</p> <p>As usual, we can scale this even further, training up to 2048 PPO agents in parallel on a single NVIDIA A100 80Gb in under a minute.</p> In\u00a0[11]: Copied! <pre>num_seeds = 2048\n\nexperiment.seeds = tuple(range(num_seeds))\ntrain_state, logs = experiment.run(do_log=False)\n</pre> num_seeds = 2048  experiment.seeds = tuple(range(num_seeds)) train_state, logs = experiment.run(do_log=False) <pre>Running experiment with the following configuration:\n{'name': 'NAVIX + PPO (Tutorial)', 'agent': PPO(hparams=PPOHparams(debug=False, log_frequency=1, log_render=False, budget=1000000, num_envs=16, num_steps=128, num_minibatches=8, num_epochs=1, gae_lambda=0.95, clip_eps=0.2, ent_coef=0.01, vf_coef=0.5, max_grad_norm=0.5, lr=0.00025, anneal_lr=True, normalise_advantage=True, clip_value_loss=True), network=ActorCritic(\n    # attributes\n    action_dim = 7\n    actor_encoder = MLPEncoder(\n        # attributes\n        hidden_size = 64\n    )\n    critic_encoder = MLPEncoder(\n        # attributes\n        hidden_size = 64\n    )\n), env=DoorKey(height=5, width=5, max_steps=100, observation_space=Discrete(shape=(84,), dtype=&lt;class 'jax.numpy.uint8'&gt;, minimum=Array(0, dtype=int32, weak_type=True), maximum=Array(255, dtype=int32, weak_type=True)), action_space=Discrete(shape=(), dtype=&lt;class 'jax.numpy.int32'&gt;, minimum=Array(0, dtype=int32, weak_type=True), maximum=Array(6, dtype=int32, weak_type=True)), reward_space=Continuous(shape=(), dtype=&lt;class 'jax.numpy.float32'&gt;, minimum=Array(-1., dtype=float32, weak_type=True), maximum=Array(1., dtype=float32, weak_type=True)), gamma=0.99, penality_coeff=0.0, observation_fn=&lt;function FlattenObsWrapper.&lt;locals&gt;.&lt;lambda&gt; at 0x7f8cf43eae60&gt;, reward_fn=&lt;function on_goal_reached at 0x7f8e8c796560&gt;, termination_fn=&lt;function on_goal_reached at 0x7f8e8c796cb0&gt;, transitions_fn=&lt;function stochastic_transition at 0x7f8e8c797010&gt;, action_set=(&lt;function rotate_ccw at 0x7f8e8c795750&gt;, &lt;function rotate_cw at 0x7f8e8c7956c0&gt;, &lt;function forward at 0x7f8e8c7957e0&gt;, &lt;function pickup at 0x7f8e8c795a20&gt;, &lt;function drop at 0x7f8e8c795ab0&gt;, &lt;function toggle at 0x7f8e8c795b40&gt;, &lt;function done at 0x7f8e8c795c60&gt;), random_start=False)), 'env': DoorKey(height=5, width=5, max_steps=100, observation_space=Discrete(shape=(84,), dtype=&lt;class 'jax.numpy.uint8'&gt;, minimum=Array(0, dtype=int32, weak_type=True), maximum=Array(255, dtype=int32, weak_type=True)), action_space=Discrete(shape=(), dtype=&lt;class 'jax.numpy.int32'&gt;, minimum=Array(0, dtype=int32, weak_type=True), maximum=Array(6, dtype=int32, weak_type=True)), reward_space=Continuous(shape=(), dtype=&lt;class 'jax.numpy.float32'&gt;, minimum=Array(-1., dtype=float32, weak_type=True), maximum=Array(1., dtype=float32, weak_type=True)), gamma=0.99, penality_coeff=0.0, observation_fn=&lt;function FlattenObsWrapper.&lt;locals&gt;.&lt;lambda&gt; at 0x7f8cf43eae60&gt;, reward_fn=&lt;function on_goal_reached at 0x7f8e8c796560&gt;, termination_fn=&lt;function on_goal_reached at 0x7f8e8c796cb0&gt;, transitions_fn=&lt;function stochastic_transition at 0x7f8e8c797010&gt;, action_set=(&lt;function rotate_ccw at 0x7f8e8c795750&gt;, &lt;function rotate_cw at 0x7f8e8c7956c0&gt;, &lt;function forward at 0x7f8e8c7957e0&gt;, &lt;function pickup at 0x7f8e8c795a20&gt;, &lt;function drop at 0x7f8e8c795ab0&gt;, &lt;function toggle at 0x7f8e8c795b40&gt;, &lt;function done at 0x7f8e8c795c60&gt;), random_start=False), 'env_id': 'Navix-DoorKey-5x5-v0', 'seeds': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047), 'group': ''}\nCompiling training function...\nCompilation time cost: 25.802624702453613\nTraining agent...\nTraining time cost: 59.766313791275024\nTraining complete\nCompilation time cost: 25.802624702453613\nTraining time cost: 59.766313791275024\nTotal time cost: 85.56893849372864\n</pre>"},{"location":"examples/ppo.html#training-a-ppo-agent","title":"Training a PPO agent\u00b6","text":"<p>This tutorial demonstrates how to set up and run an experiment using NAVIX with a PPO (Proximal Policy Optimization) agent. We will go through the steps of defining the configuration, creating an environment, initializing the agent, and running the experiment.</p>"},{"location":"examples/ppo.html#imports-and-configuration","title":"Imports and Configuration\u00b6","text":"<p>We start by importing the necessary modules and defining the <code>Args</code> dataclass to hold our configuration parameters.</p>"},{"location":"examples/ppo.html#flattenobswrapper-function","title":"FlattenObsWrapper Function\u00b6","text":"<p>This function is a wrapper to flatten the observation space of the environment for easier processing.</p>"},{"location":"examples/ppo.html#environment-setup","title":"Environment Setup\u00b6","text":"<p>We create and configure the environment using the <code>nx.make</code> function and apply our observation wrapper.</p>"},{"location":"examples/ppo.html#agent-initialization","title":"Agent Initialization\u00b6","text":"<p>We initialize a PPO agent with the specified hyperparameters and action dimensions derived from the environment.</p>"},{"location":"examples/ppo.html#experiment-setup-and-execution","title":"Experiment Setup and Execution\u00b6","text":"<p>We set up the experiment with the specified project name, agent, environment, and seeds, and then run the experiment.</p>"},{"location":"home/environments.html","title":"Supported environments","text":"<p>NAVIX is designed to be a drop-in replacement for the official MiniGrid environments. You can reuse your existing code and scripts with NAVIX with little to no modification.</p> <p>You can find the original MiniGrid environments in the MiniGrid documentation. For more details on MiniGrid, have a look also at the original publication.</p> <p>The following table lists the supported MiniGrid environments and their corresponding NAVIX environments. If you cannot find the environment you are looking for, please consider opening a feature request on GitHub.</p> MiniGrid ID NAVIX ID Description <code>MiniGrid-Empty-5x5-v0</code> <code>Navix-Empty-5x5-v0</code> Empty 5x5 grid <code>MiniGrid-Empty-6x6-v0</code> <code>Navix-Empty-6x6-v0</code> Empty 6x6 grid <code>MiniGrid-Empty-8x8-v0</code> <code>Navix-Empty-8x8-v0</code> Empty 8x8 grid <code>MiniGrid-Empty-16x16-v0</code> <code>Navix-Empty-16x16-v0</code> Empty 16x16 grid <code>MiniGrid-Empty-Random-5x5-v0</code> <code>Navix-Empty-Random-5x5-v0</code> Empty 5x5 grid with random starts <code>MiniGrid-Empty-Random-6x6-v0</code> <code>Navix-Empty-Random-6x6-v0</code> Empty 6x6 grid with random starts <code>MiniGrid-Empty-Random-8x8-v0</code> <code>Navix-Empty-Random-8x8-v0</code> Empty 8x8 grid with random starts <code>MiniGrid-Empty-Random-16x16-v0</code> <code>Navix-Empty-Random-16x16-v0</code> Empty 16x16 grid with random starts <code>MiniGrid-FourRooms-v0</code> <code>Navix-FourRooms-v0</code> Four rooms <code>MiniGrid-DoorKey-5x5-v0</code> <code>Navix-DoorKey-5x5-v0</code> 5x5 grid with a key and a door <code>MiniGrid-DoorKey-6x6-v0</code> <code>Navix-DoorKey-6x6-v0</code> 6x6 grid with a key and a door <code>MiniGrid-DoorKey-8x8-v0</code> <code>Navix-DoorKey-8x8-v0</code> 8x8 grid with a key and a door <code>MiniGrid-DoorKey-16x16-v0</code> <code>Navix-DoorKey-16x16-v0</code> 16x16 grid with a key and a door <code>MiniGrid-DoorKey-5x5-Random-v0</code> <code>Navix-DoorKey-5x5-Random-v0</code> 5x5 grid with a key and a door <code>MiniGrid-DoorKey-6x6-Random-v0</code> <code>Navix-DoorKey-6x6-Random-v0</code> 6x6 grid with a key and a door <code>MiniGrid-DoorKey-8x8-Random-v0</code> <code>Navix-DoorKey-8x8-Random-v0</code> 8x8 grid with a key and a door <code>MiniGrid-DoorKey-16x16-Random-v0</code> <code>Navix-DoorKey-16x16-Random-v0</code> 16x16 grid with a key and a door <code>MiniGrid-KeyCorridorS3R1-v0</code> <code>Navix-KeyCorridorS3R1-v0</code> Corridor with a key 3 cells away <code>MiniGrid-KeyCorridorS3R2-v0</code> <code>Navix-KeyCorridorS3R2-v0</code> Corridor with a key 3 cells away <code>MiniGrid-KeyCorridorS3R3-v0</code> <code>Navix-KeyCorridorS3R3-v0</code> Corridor with a key 3 cells away <code>MiniGrid-KeyCorridorS4R3-v0</code> <code>Navix-KeyCorridorS4R3-v0</code> Corridor with a key 4 cells away <code>MiniGrid-KeyCorridorS5R3-v0</code> <code>Navix-KeyCorridorS5R3-v0</code> Corridor with a key 5 cells away <code>MiniGrid-KeyCorridorS6R3-v0</code> <code>Navix-KeyCorridorS6R3-v0</code> Corridor with a key 6 cells away <code>MiniGrid-Crossings-S9N1-v0</code> <code>Navix-Crossings-S9N1-v0</code> A 9x9 room with 1 wall crossing it <code>MiniGrid-Crossings-S9N2-v0</code> <code>Navix-Crossings-S9N2-v0</code> A 9x9 room with 2 walls crossing it <code>MiniGrid-Crossings-S9N3-v0</code> <code>Navix-Crossings-S9N3-v0</code> A 9x9 room with 3 walls crossing it <code>MiniGrid-Crossings-S11N5-v0</code> <code>Navix-Crossings-S11N5-v0</code> A 11x11 room with 5 walls crossing it <code>MiniGrid-DistShift1-v0</code> <code>Navix-DistShift1-v0</code> DistShift with 1 goal <code>MiniGrid-DistShift2-v0</code> <code>Navix-DistShift2-v0</code> DistShift with 2 goals <code>MiniGrid-LavaGap-S5-v0</code> <code>Navix-LavaGap-S5-v0</code> LavaGap with in a 5x5 room <code>MiniGrid-LavaGap-S6-v0</code> <code>Navix-LavaGap-S6-v0</code> LavaGap with in a 6x6 room <code>MiniGrid-LavaGap-S7-v0</code> <code>Navix-LavaGap-S7-v0</code> LavaGap with 7x7 room <code>MiniGrid-GoToDoor-5x5-v0</code> <code>Navix-GoToDoor-5x5-v0</code> 5x5 grid that terminates with a <code>done</code> action next to a certain door <code>MiniGrid-GoToDoor-6x6-v0</code> <code>Navix-GoToDoor-6x6-v0</code> 6x6 grid that terminates with a <code>done</code> action next to a certain doo <code>MiniGrid-GoToDoor-8x8-v0</code> <code>Navix-GoToDoor-8x8-v0</code> 8x8 grid grid that terminates with a <code>done</code> action next to a certain doo <code>MiniGrid-Dynamic-Obstacles-5x5-v0</code> <code>Navix-Dynamic-Obstacles-5x5-v0</code> 5x5 grid with dynamic obstacles <code>MiniGrid-Dynamic-Obstacles-6x6-v0</code> <code>Navix-Dynamic-Obstacles-6x6-v0</code> 6x6 grid with dynamic obstacles <code>MiniGrid-Dynamic-Obstacles-8x8-v0</code> <code>Navix-Dynamic-Obstacles-8x8-v0</code> 8x8 grid with dynamic obstacles <code>MiniGrid-Dynamic-Obstacles-16x16-v0</code> <code>Navix-Dynamic-Obstacles-16x16-v0</code> 16x16 grid with dynamic obstacles <code>MiniGrid-Dynamic-Obstacles-Random-5x5-v0</code> <code>Navix-Dynamic-Obstacles-Random-5x5-v0</code> 5x5 grid with dynamic obstacles and random starts <code>MiniGrid-Dynamic-Obstacles-Random-6x6-v0</code> <code>Navix-Dynamic-Obstacles-Random-6x6-v0</code> 6x6 grid with dynamic obstacles and random starts <code>MiniGrid-Dynamic-Obstacles-Random-8x8-v0</code> <code>Navix-Dynamic-Obstacles-Random-8x8-v0</code> 8x8 grid with dynamic obstacles and random starts <code>MiniGrid-Dynamic-Obstacles-Random-16x16-v0</code> <code>Navix-Dynamic-Obstacles-Random-16x16-v0</code> 16x16 grid with dynamic obstacles and random starts"},{"location":"install/index.html","title":"Install","text":""},{"location":"install/index.html#install-jax","title":"Install JAX","text":"<p>NAVIX depends on JAX.  Follow the official JAX installation guide for your OS and preferred accelerator.</p> <p>For a quick start, you can install JAX for GPU with the following command: <pre><code>pip install -U \"jax[cuda12]\"\n</code></pre> which will install JAX with CUDA 12 support.</p>"},{"location":"install/index.html#install-navix","title":"Install NAVIX","text":"<pre><code>pip install navix\n</code></pre> <p>Or, for the latest version from source: <pre><code>pip install git+https://github.com/epignatelli/navix\n</code></pre></p>"},{"location":"install/index.html#installing-in-a-conda-environment","title":"Installing in a conda environment","text":"<p>We recommend install NAVIX in a conda environment. To create a new conda environment and install NAVIX, run the following commands: <pre><code>conda create -n navix python=3.10\nconda activate navix\ncd &lt;path/to/navix-repo&gt;\npip install navix\n</code></pre></p>"},{"location":"scripts/gen_doc_stubs.html","title":"Gen doc stubs","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"Generate the code reference pages and navigation.\"\"\"\n</pre> \"\"\"Generate the code reference pages and navigation.\"\"\" In\u00a0[\u00a0]: Copied! <pre>from pathlib import Path\n</pre> from pathlib import Path In\u00a0[\u00a0]: Copied! <pre>import mkdocs_gen_files\n</pre> import mkdocs_gen_files In\u00a0[\u00a0]: Copied! <pre>nav = mkdocs_gen_files.nav.Nav()\n</pre> nav = mkdocs_gen_files.nav.Nav() In\u00a0[\u00a0]: Copied! <pre>root = Path(__file__).parent.parent.parent\nsrc = root / \"navix\"\nout = \"api\"\n</pre> root = Path(__file__).parent.parent.parent src = root / \"navix\" out = \"api\" In\u00a0[\u00a0]: Copied! <pre>exclude_files = [\n    \"_version.py\",\n    \"config.py\"\n]\n</pre> exclude_files = [     \"_version.py\",     \"config.py\" ] In\u00a0[\u00a0]: Copied! <pre>for path in sorted(src.rglob(\"*.py\")):\n    if path.name in exclude_files:\n        continue\n\n    print(\"Generating stub for\", path)\n    module_path = path.relative_to(src).with_suffix(\"\")\n    doc_path = path.relative_to(src).with_suffix(\".md\")\n    full_doc_path = Path(out, doc_path)\n\n    parts = tuple(module_path.parts)\n    parts = (\"navix\",) + parts\n\n    if parts[-1] == \"__init__\":\n        parts = parts[:-1]\n        doc_path = doc_path.with_name(\"index.md\")\n        full_doc_path = full_doc_path.with_name(\"index.md\")\n    elif parts[-1] == \"__main__\":\n        continue\n    \n    if parts:\n        nav[parts] = doc_path.as_posix()\n\n    with mkdocs_gen_files.open(full_doc_path, \"w\") as fd:\n        ident = \".\".join(parts)\n        fd.write(f\"::: {ident}\")\n\n    mkdocs_gen_files.set_edit_path(full_doc_path, path.relative_to(root))\n</pre> for path in sorted(src.rglob(\"*.py\")):     if path.name in exclude_files:         continue      print(\"Generating stub for\", path)     module_path = path.relative_to(src).with_suffix(\"\")     doc_path = path.relative_to(src).with_suffix(\".md\")     full_doc_path = Path(out, doc_path)      parts = tuple(module_path.parts)     parts = (\"navix\",) + parts      if parts[-1] == \"__init__\":         parts = parts[:-1]         doc_path = doc_path.with_name(\"index.md\")         full_doc_path = full_doc_path.with_name(\"index.md\")     elif parts[-1] == \"__main__\":         continue          if parts:         nav[parts] = doc_path.as_posix()      with mkdocs_gen_files.open(full_doc_path, \"w\") as fd:         ident = \".\".join(parts)         fd.write(f\"::: {ident}\")      mkdocs_gen_files.set_edit_path(full_doc_path, path.relative_to(root)) In\u00a0[\u00a0]: Copied! <pre>with mkdocs_gen_files.open(f\"{out}/index.md\", \"w\") as nav_file:\n    nav_file.writelines(nav.build_literate_nav())\n</pre> with mkdocs_gen_files.open(f\"{out}/index.md\", \"w\") as nav_file:     nav_file.writelines(nav.build_literate_nav())"}]}